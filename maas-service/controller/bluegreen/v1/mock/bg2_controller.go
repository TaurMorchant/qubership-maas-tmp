// Code generated by MockGen. DO NOT EDIT.
// Source: bg2_controller.go

// Package mock_v1 is a generated GoMock package.
package mock_v1

import (
	context "context"
	domain "maas/maas-service/service/bg2/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockManager) Commit(arg0 context.Context, arg1 domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockManagerMockRecorder) Commit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockManager)(nil).Commit), arg0, arg1)
}

// DestroyDomain mocks base method.
func (m *MockManager) DestroyDomain(arg0 context.Context, arg1 domain.BGNamespaces) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyDomain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyDomain indicates an expected call of DestroyDomain.
func (mr *MockManagerMockRecorder) DestroyDomain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyDomain", reflect.TypeOf((*MockManager)(nil).DestroyDomain), arg0, arg1)
}

// InitDomain mocks base method.
func (m *MockManager) InitDomain(arg0 context.Context, arg1 domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitDomain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitDomain indicates an expected call of InitDomain.
func (mr *MockManagerMockRecorder) InitDomain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDomain", reflect.TypeOf((*MockManager)(nil).InitDomain), arg0, arg1)
}

// ListDomains mocks base method.
func (m *MockManager) ListDomains(arg0 context.Context) ([]domain.BGNamespaces, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDomains", arg0)
	ret0, _ := ret[0].([]domain.BGNamespaces)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDomains indicates an expected call of ListDomains.
func (mr *MockManagerMockRecorder) ListDomains(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDomains", reflect.TypeOf((*MockManager)(nil).ListDomains), arg0)
}

// Promote mocks base method.
func (m *MockManager) Promote(arg0 context.Context, arg1 domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Promote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Promote indicates an expected call of Promote.
func (mr *MockManagerMockRecorder) Promote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Promote", reflect.TypeOf((*MockManager)(nil).Promote), arg0, arg1)
}

// Rollback mocks base method.
func (m *MockManager) Rollback(arg0 context.Context, arg1 domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockManagerMockRecorder) Rollback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockManager)(nil).Rollback), arg0, arg1)
}

// Warmup mocks base method.
func (m *MockManager) Warmup(arg0 context.Context, arg1 domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warmup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Warmup indicates an expected call of Warmup.
func (mr *MockManagerMockRecorder) Warmup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warmup", reflect.TypeOf((*MockManager)(nil).Warmup), arg0, arg1)
}
