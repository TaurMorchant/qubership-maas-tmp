// Code generated by MockGen. DO NOT EDIT.
// Source: composite_resource.go

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	composite "maas/maas-service/service/composite"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegistrationService is a mock of RegistrationService interface.
type MockRegistrationService struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationServiceMockRecorder
}

// MockRegistrationServiceMockRecorder is the mock recorder for MockRegistrationService.
type MockRegistrationServiceMockRecorder struct {
	mock *MockRegistrationService
}

// NewMockRegistrationService creates a new mock instance.
func NewMockRegistrationService(ctrl *gomock.Controller) *MockRegistrationService {
	mock := &MockRegistrationService{ctrl: ctrl}
	mock.recorder = &MockRegistrationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrationService) EXPECT() *MockRegistrationServiceMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockRegistrationService) Destroy(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockRegistrationServiceMockRecorder) Destroy(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockRegistrationService)(nil).Destroy), ctx, namespace)
}

// GetByBaseline mocks base method.
func (m *MockRegistrationService) GetByBaseline(ctx context.Context, baseline string) (*composite.CompositeRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBaseline", ctx, baseline)
	ret0, _ := ret[0].(*composite.CompositeRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBaseline indicates an expected call of GetByBaseline.
func (mr *MockRegistrationServiceMockRecorder) GetByBaseline(ctx, baseline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBaseline", reflect.TypeOf((*MockRegistrationService)(nil).GetByBaseline), ctx, baseline)
}

// List mocks base method.
func (m *MockRegistrationService) List(ctx context.Context) ([]composite.CompositeRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]composite.CompositeRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRegistrationServiceMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRegistrationService)(nil).List), ctx)
}

// Upsert mocks base method.
func (m *MockRegistrationService) Upsert(ctx context.Context, registrationRequest *composite.CompositeRegistration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, registrationRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockRegistrationServiceMockRecorder) Upsert(ctx, registrationRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRegistrationService)(nil).Upsert), ctx, registrationRequest)
}
