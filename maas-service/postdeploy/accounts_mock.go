// Code generated by MockGen. DO NOT EDIT.
// Source: accounts.go

// Package postdeploy is a generated GoMock package.
package postdeploy

import (
	context "context"
	model "maas/maas-service/model"
	utils "maas/maas-service/utils"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// CreateNewManager mocks base method.
func (m *MockAuthService) CreateNewManager(ctx context.Context, account *model.ManagerAccountDto) (*model.ManagerAccountDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewManager", ctx, account)
	ret0, _ := ret[0].(*model.ManagerAccountDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewManager indicates an expected call of CreateNewManager.
func (mr *MockAuthServiceMockRecorder) CreateNewManager(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewManager", reflect.TypeOf((*MockAuthService)(nil).CreateNewManager), ctx, account)
}

// CreateUserAccount mocks base method.
func (m *MockAuthService) CreateUserAccount(ctx context.Context, accountRequest *model.ClientAccountDto) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAccount", ctx, accountRequest)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserAccount indicates an expected call of CreateUserAccount.
func (mr *MockAuthServiceMockRecorder) CreateUserAccount(ctx, accountRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAccount", reflect.TypeOf((*MockAuthService)(nil).CreateUserAccount), ctx, accountRequest)
}

// GetAccountByUsername mocks base method.
func (m *MockAuthService) GetAccountByUsername(ctx context.Context, username string) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByUsername", ctx, username)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByUsername indicates an expected call of GetAccountByUsername.
func (mr *MockAuthServiceMockRecorder) GetAccountByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByUsername", reflect.TypeOf((*MockAuthService)(nil).GetAccountByUsername), ctx, username)
}

// UpdateUserPassword mocks base method.
func (m *MockAuthService) UpdateUserPassword(ctx context.Context, username string, password utils.SecretString) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockAuthServiceMockRecorder) UpdateUserPassword(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockAuthService)(nil).UpdateUserPassword), ctx, username, password)
}
