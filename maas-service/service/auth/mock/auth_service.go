// Code generated by MockGen. DO NOT EDIT.
// Source: auth_service.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	context "context"
	model "maas/maas-service/model"
	composite "maas/maas-service/service/composite"
	utils "maas/maas-service/utils"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// CheckSecurityForBoundNamespaces mocks base method.
func (m *MockAuthService) CheckSecurityForBoundNamespaces(ctx context.Context, namespace string, classifier *model.Classifier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSecurityForBoundNamespaces", ctx, namespace, classifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckSecurityForBoundNamespaces indicates an expected call of CheckSecurityForBoundNamespaces.
func (mr *MockAuthServiceMockRecorder) CheckSecurityForBoundNamespaces(ctx, namespace, classifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSecurityForBoundNamespaces", reflect.TypeOf((*MockAuthService)(nil).CheckSecurityForBoundNamespaces), ctx, namespace, classifier)
}

// CheckSecurityForSingleNamespace mocks base method.
func (m *MockAuthService) CheckSecurityForSingleNamespace(ctx context.Context, namespace string, classifier *model.Classifier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSecurityForSingleNamespace", ctx, namespace, classifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckSecurityForSingleNamespace indicates an expected call of CheckSecurityForSingleNamespace.
func (mr *MockAuthServiceMockRecorder) CheckSecurityForSingleNamespace(ctx, namespace, classifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSecurityForSingleNamespace", reflect.TypeOf((*MockAuthService)(nil).CheckSecurityForSingleNamespace), ctx, namespace, classifier)
}

// CreateNewManager mocks base method.
func (m *MockAuthService) CreateNewManager(ctx context.Context, accountRequest *model.ManagerAccountDto) (*model.ManagerAccountDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewManager", ctx, accountRequest)
	ret0, _ := ret[0].(*model.ManagerAccountDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewManager indicates an expected call of CreateNewManager.
func (mr *MockAuthServiceMockRecorder) CreateNewManager(ctx, accountRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewManager", reflect.TypeOf((*MockAuthService)(nil).CreateNewManager), ctx, accountRequest)
}

// CreateUserAccount mocks base method.
func (m *MockAuthService) CreateUserAccount(ctx context.Context, accountRequest *model.ClientAccountDto) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserAccount", ctx, accountRequest)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserAccount indicates an expected call of CreateUserAccount.
func (mr *MockAuthServiceMockRecorder) CreateUserAccount(ctx, accountRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserAccount", reflect.TypeOf((*MockAuthService)(nil).CreateUserAccount), ctx, accountRequest)
}

// DeleteUserAccount mocks base method.
func (m *MockAuthService) DeleteUserAccount(ctx context.Context, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserAccount", ctx, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserAccount indicates an expected call of DeleteUserAccount.
func (mr *MockAuthServiceMockRecorder) DeleteUserAccount(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserAccount", reflect.TypeOf((*MockAuthService)(nil).DeleteUserAccount), ctx, username)
}

// GetAccountByUsername mocks base method.
func (m *MockAuthService) GetAccountByUsername(ctx context.Context, username string) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByUsername", ctx, username)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByUsername indicates an expected call of GetAccountByUsername.
func (mr *MockAuthServiceMockRecorder) GetAccountByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByUsername", reflect.TypeOf((*MockAuthService)(nil).GetAccountByUsername), ctx, username)
}

// GetAllAccounts mocks base method.
func (m *MockAuthService) GetAllAccounts(ctx context.Context) (*[]model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAccounts", ctx)
	ret0, _ := ret[0].(*[]model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAccounts indicates an expected call of GetAllAccounts.
func (mr *MockAuthServiceMockRecorder) GetAllAccounts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAccounts", reflect.TypeOf((*MockAuthService)(nil).GetAllAccounts), ctx)
}

// GetAllowedNamespaces mocks base method.
func (m *MockAuthService) GetAllowedNamespaces(ctx context.Context, namespace string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllowedNamespaces", ctx, namespace)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllowedNamespaces indicates an expected call of GetAllowedNamespaces.
func (mr *MockAuthServiceMockRecorder) GetAllowedNamespaces(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllowedNamespaces", reflect.TypeOf((*MockAuthService)(nil).GetAllowedNamespaces), ctx, namespace)
}

// IsAccessGranted mocks base method.
func (m *MockAuthService) IsAccessGranted(ctx context.Context, username string, password utils.SecretString, namespace string, role []model.RoleName) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAccessGranted", ctx, username, password, namespace, role)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAccessGranted indicates an expected call of IsAccessGranted.
func (mr *MockAuthServiceMockRecorder) IsAccessGranted(ctx, username, password, namespace, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAccessGranted", reflect.TypeOf((*MockAuthService)(nil).IsAccessGranted), ctx, username, password, namespace, role)
}

// IsFirstAccountManager mocks base method.
func (m *MockAuthService) IsFirstAccountManager(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFirstAccountManager", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsFirstAccountManager indicates an expected call of IsFirstAccountManager.
func (mr *MockAuthServiceMockRecorder) IsFirstAccountManager(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFirstAccountManager", reflect.TypeOf((*MockAuthService)(nil).IsFirstAccountManager), ctx)
}

// UpdateUserPassword mocks base method.
func (m *MockAuthService) UpdateUserPassword(ctx context.Context, username string, password utils.SecretString) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", ctx, username, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword.
func (mr *MockAuthServiceMockRecorder) UpdateUserPassword(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockAuthService)(nil).UpdateUserPassword), ctx, username, password)
}

// MockCompositeRegistrar is a mock of CompositeRegistrar interface.
type MockCompositeRegistrar struct {
	ctrl     *gomock.Controller
	recorder *MockCompositeRegistrarMockRecorder
}

// MockCompositeRegistrarMockRecorder is the mock recorder for MockCompositeRegistrar.
type MockCompositeRegistrarMockRecorder struct {
	mock *MockCompositeRegistrar
}

// NewMockCompositeRegistrar creates a new mock instance.
func NewMockCompositeRegistrar(ctrl *gomock.Controller) *MockCompositeRegistrar {
	mock := &MockCompositeRegistrar{ctrl: ctrl}
	mock.recorder = &MockCompositeRegistrarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompositeRegistrar) EXPECT() *MockCompositeRegistrarMockRecorder {
	return m.recorder
}

// GetByNamespace mocks base method.
func (m *MockCompositeRegistrar) GetByNamespace(ctx context.Context, namespace string) (*composite.CompositeRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNamespace", ctx, namespace)
	ret0, _ := ret[0].(*composite.CompositeRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNamespace indicates an expected call of GetByNamespace.
func (mr *MockCompositeRegistrarMockRecorder) GetByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNamespace", reflect.TypeOf((*MockCompositeRegistrar)(nil).GetByNamespace), ctx, namespace)
}
