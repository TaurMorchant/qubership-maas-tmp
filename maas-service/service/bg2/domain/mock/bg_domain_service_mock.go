// Code generated by MockGen. DO NOT EDIT.
// Source: bg_domain_service.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	domain "maas/maas-service/service/bg2/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBGDomainService is a mock of BGDomainService interface.
type MockBGDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockBGDomainServiceMockRecorder
}

// MockBGDomainServiceMockRecorder is the mock recorder for MockBGDomainService.
type MockBGDomainServiceMockRecorder struct {
	mock *MockBGDomainService
}

// NewMockBGDomainService creates a new mock instance.
func NewMockBGDomainService(ctrl *gomock.Controller) *MockBGDomainService {
	mock := &MockBGDomainService{ctrl: ctrl}
	mock.recorder = &MockBGDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBGDomainService) EXPECT() *MockBGDomainServiceMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockBGDomainService) Bind(ctx context.Context, ns1, ns2, ctr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", ctx, ns1, ns2, ctr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockBGDomainServiceMockRecorder) Bind(ctx, ns1, ns2, ctr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockBGDomainService)(nil).Bind), ctx, ns1, ns2, ctr)
}

// FindByNamespace mocks base method.
func (m *MockBGDomainService) FindByNamespace(ctx context.Context, namespace string) (*domain.BGNamespaces, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNamespace", ctx, namespace)
	ret0, _ := ret[0].(*domain.BGNamespaces)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNamespace indicates an expected call of FindByNamespace.
func (mr *MockBGDomainServiceMockRecorder) FindByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNamespace", reflect.TypeOf((*MockBGDomainService)(nil).FindByNamespace), ctx, namespace)
}

// GetCurrentBgStateByNamespace mocks base method.
func (m *MockBGDomainService) GetCurrentBgStateByNamespace(ctx context.Context, namespace string) (*domain.BGState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentBgStateByNamespace", ctx, namespace)
	ret0, _ := ret[0].(*domain.BGState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentBgStateByNamespace indicates an expected call of GetCurrentBgStateByNamespace.
func (mr *MockBGDomainServiceMockRecorder) GetCurrentBgStateByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentBgStateByNamespace", reflect.TypeOf((*MockBGDomainService)(nil).GetCurrentBgStateByNamespace), ctx, namespace)
}

// InsertBgState mocks base method.
func (m *MockBGDomainService) InsertBgState(ctx context.Context, state domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBgState", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBgState indicates an expected call of InsertBgState.
func (mr *MockBGDomainServiceMockRecorder) InsertBgState(ctx, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBgState", reflect.TypeOf((*MockBGDomainService)(nil).InsertBgState), ctx, state)
}

// List mocks base method.
func (m *MockBGDomainService) List(ctx context.Context) ([]domain.BGNamespaces, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]domain.BGNamespaces)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBGDomainServiceMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBGDomainService)(nil).List), ctx)
}

// Unbind mocks base method.
func (m *MockBGDomainService) Unbind(ctx context.Context, namespace string) (*domain.BGNamespaces, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unbind", ctx, namespace)
	ret0, _ := ret[0].(*domain.BGNamespaces)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unbind indicates an expected call of Unbind.
func (mr *MockBGDomainServiceMockRecorder) Unbind(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unbind", reflect.TypeOf((*MockBGDomainService)(nil).Unbind), ctx, namespace)
}

// UpdateController mocks base method.
func (m *MockBGDomainService) UpdateController(ctx context.Context, origin, controller string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateController", ctx, origin, controller)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateController indicates an expected call of UpdateController.
func (mr *MockBGDomainServiceMockRecorder) UpdateController(ctx, origin, controller interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateController", reflect.TypeOf((*MockBGDomainService)(nil).UpdateController), ctx, origin, controller)
}

// MockBGDomainDao is a mock of BGDomainDao interface.
type MockBGDomainDao struct {
	ctrl     *gomock.Controller
	recorder *MockBGDomainDaoMockRecorder
}

// MockBGDomainDaoMockRecorder is the mock recorder for MockBGDomainDao.
type MockBGDomainDaoMockRecorder struct {
	mock *MockBGDomainDao
}

// NewMockBGDomainDao creates a new mock instance.
func NewMockBGDomainDao(ctrl *gomock.Controller) *MockBGDomainDao {
	mock := &MockBGDomainDao{ctrl: ctrl}
	mock.recorder = &MockBGDomainDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBGDomainDao) EXPECT() *MockBGDomainDaoMockRecorder {
	return m.recorder
}

// Bind mocks base method.
func (m *MockBGDomainDao) Bind(ctx context.Context, origin, peer, controller string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", ctx, origin, peer, controller)
	ret0, _ := ret[0].(error)
	return ret0
}

// Bind indicates an expected call of Bind.
func (mr *MockBGDomainDaoMockRecorder) Bind(ctx, origin, peer, controller interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockBGDomainDao)(nil).Bind), ctx, origin, peer, controller)
}

// FindByNamespace mocks base method.
func (m *MockBGDomainDao) FindByNamespace(ctx context.Context, namespace string) (*domain.BGDomainEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNamespace", ctx, namespace)
	ret0, _ := ret[0].(*domain.BGDomainEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNamespace indicates an expected call of FindByNamespace.
func (mr *MockBGDomainDaoMockRecorder) FindByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNamespace", reflect.TypeOf((*MockBGDomainDao)(nil).FindByNamespace), ctx, namespace)
}

// GetState mocks base method.
func (m *MockBGDomainDao) GetState(ctx context.Context, namespace int64) (*domain.BGStateEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", ctx, namespace)
	ret0, _ := ret[0].(*domain.BGStateEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockBGDomainDaoMockRecorder) GetState(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockBGDomainDao)(nil).GetState), ctx, namespace)
}

// List mocks base method.
func (m *MockBGDomainDao) List(ctx context.Context) (*[]domain.BGDomainEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(*[]domain.BGDomainEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockBGDomainDaoMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockBGDomainDao)(nil).List), ctx)
}

// Unbind mocks base method.
func (m *MockBGDomainDao) Unbind(ctx context.Context, namespace string) (*domain.BGDomainEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unbind", ctx, namespace)
	ret0, _ := ret[0].(*domain.BGDomainEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unbind indicates an expected call of Unbind.
func (mr *MockBGDomainDaoMockRecorder) Unbind(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unbind", reflect.TypeOf((*MockBGDomainDao)(nil).Unbind), ctx, namespace)
}

// UpdateController mocks base method.
func (m *MockBGDomainDao) UpdateController(ctx context.Context, origin, controller string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateController", ctx, origin, controller)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateController indicates an expected call of UpdateController.
func (mr *MockBGDomainDaoMockRecorder) UpdateController(ctx, origin, controller interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateController", reflect.TypeOf((*MockBGDomainDao)(nil).UpdateController), ctx, origin, controller)
}

// UpdateState mocks base method.
func (m *MockBGDomainDao) UpdateState(ctx context.Context, bgStateEntity domain.BGStateEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateState", ctx, bgStateEntity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateState indicates an expected call of UpdateState.
func (mr *MockBGDomainDaoMockRecorder) UpdateState(ctx, bgStateEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateState", reflect.TypeOf((*MockBGDomainDao)(nil).UpdateState), ctx, bgStateEntity)
}
