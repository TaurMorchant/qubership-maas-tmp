// Code generated by MockGen. DO NOT EDIT.
// Source: bg_manager.go

// Package mock_bg2 is a generated GoMock package.
package mock_bg2

import (
	context "context"
	domain "maas/maas-service/service/bg2/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBrokerService is a mock of BrokerService interface.
type MockBrokerService struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerServiceMockRecorder
}

// MockBrokerServiceMockRecorder is the mock recorder for MockBrokerService.
type MockBrokerServiceMockRecorder struct {
	mock *MockBrokerService
}

// NewMockBrokerService creates a new mock instance.
func NewMockBrokerService(ctrl *gomock.Controller) *MockBrokerService {
	mock := &MockBrokerService{ctrl: ctrl}
	mock.recorder = &MockBrokerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBrokerService) EXPECT() *MockBrokerServiceMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockBrokerService) Commit(arg0 context.Context, arg1 *domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockBrokerServiceMockRecorder) Commit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockBrokerService)(nil).Commit), arg0, arg1)
}

// DestroyDomain mocks base method.
func (m *MockBrokerService) DestroyDomain(arg0 context.Context, arg1 *domain.BGNamespaces) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyDomain", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyDomain indicates an expected call of DestroyDomain.
func (mr *MockBrokerServiceMockRecorder) DestroyDomain(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyDomain", reflect.TypeOf((*MockBrokerService)(nil).DestroyDomain), arg0, arg1)
}

// Promote mocks base method.
func (m *MockBrokerService) Promote(arg0 context.Context, arg1 *domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Promote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Promote indicates an expected call of Promote.
func (mr *MockBrokerServiceMockRecorder) Promote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Promote", reflect.TypeOf((*MockBrokerService)(nil).Promote), arg0, arg1)
}

// Rollback mocks base method.
func (m *MockBrokerService) Rollback(arg0 context.Context, arg1 *domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockBrokerServiceMockRecorder) Rollback(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockBrokerService)(nil).Rollback), arg0, arg1)
}

// Warmup mocks base method.
func (m *MockBrokerService) Warmup(arg0 context.Context, arg1 *domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warmup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Warmup indicates an expected call of Warmup.
func (mr *MockBrokerServiceMockRecorder) Warmup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warmup", reflect.TypeOf((*MockBrokerService)(nil).Warmup), arg0, arg1)
}
