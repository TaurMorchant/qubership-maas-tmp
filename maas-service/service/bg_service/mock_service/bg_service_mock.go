// Code generated by MockGen. DO NOT EDIT.
// Source: bg_service.go

// Package mock_bg_service is a generated GoMock package.
package mock_bg_service

import (
	context "context"
	model "maas/maas-service/model"
	bg_service "maas/maas-service/service/bg_service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBgService is a mock of BgService interface.
type MockBgService struct {
	ctrl     *gomock.Controller
	recorder *MockBgServiceMockRecorder
}

// MockBgServiceMockRecorder is the mock recorder for MockBgService.
type MockBgServiceMockRecorder struct {
	mock *MockBgService
}

// NewMockBgService creates a new mock instance.
func NewMockBgService(ctrl *gomock.Controller) *MockBgService {
	mock := &MockBgService{ctrl: ctrl}
	mock.recorder = &MockBgServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBgService) EXPECT() *MockBgServiceMockRecorder {
	return m.recorder
}

// AddBgStatusUpdateCallback mocks base method.
func (m *MockBgService) AddBgStatusUpdateCallback(cb func(context.Context, *bg_service.BgStatusChangeEvent)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddBgStatusUpdateCallback", cb)
}

// AddBgStatusUpdateCallback indicates an expected call of AddBgStatusUpdateCallback.
func (mr *MockBgServiceMockRecorder) AddBgStatusUpdateCallback(cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBgStatusUpdateCallback", reflect.TypeOf((*MockBgService)(nil).AddBgStatusUpdateCallback), cb)
}

// ApplyBgStatus mocks base method.
func (m *MockBgService) ApplyBgStatus(ctx context.Context, namespace string, bgStatus *model.BgStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyBgStatus", ctx, namespace, bgStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyBgStatus indicates an expected call of ApplyBgStatus.
func (mr *MockBgServiceMockRecorder) ApplyBgStatus(ctx, namespace, bgStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyBgStatus", reflect.TypeOf((*MockBgService)(nil).ApplyBgStatus), ctx, namespace, bgStatus)
}

// CleanupNamespace mocks base method.
func (m *MockBgService) CleanupNamespace(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupNamespace", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupNamespace indicates an expected call of CleanupNamespace.
func (mr *MockBgServiceMockRecorder) CleanupNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupNamespace", reflect.TypeOf((*MockBgService)(nil).CleanupNamespace), ctx, namespace)
}

// GetActiveVersionByNamespace mocks base method.
func (m *MockBgService) GetActiveVersionByNamespace(ctx context.Context, namespace string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveVersionByNamespace", ctx, namespace)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveVersionByNamespace indicates an expected call of GetActiveVersionByNamespace.
func (mr *MockBgServiceMockRecorder) GetActiveVersionByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveVersionByNamespace", reflect.TypeOf((*MockBgService)(nil).GetActiveVersionByNamespace), ctx, namespace)
}

// GetBgStatusByNamespace mocks base method.
func (m *MockBgService) GetBgStatusByNamespace(ctx context.Context, namespace string) (*model.BgStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBgStatusByNamespace", ctx, namespace)
	ret0, _ := ret[0].(*model.BgStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBgStatusByNamespace indicates an expected call of GetBgStatusByNamespace.
func (mr *MockBgServiceMockRecorder) GetBgStatusByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBgStatusByNamespace", reflect.TypeOf((*MockBgService)(nil).GetBgStatusByNamespace), ctx, namespace)
}
