// Code generated by MockGen. DO NOT EDIT.
// Source: configurator_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "maas/maas-service/model"
	composite "maas/maas-service/service/composite"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegistrationService is a mock of RegistrationService interface.
type MockRegistrationService struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationServiceMockRecorder
}

// MockRegistrationServiceMockRecorder is the mock recorder for MockRegistrationService.
type MockRegistrationServiceMockRecorder struct {
	mock *MockRegistrationService
}

// NewMockRegistrationService creates a new mock instance.
func NewMockRegistrationService(ctrl *gomock.Controller) *MockRegistrationService {
	mock := &MockRegistrationService{ctrl: ctrl}
	mock.recorder = &MockRegistrationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrationService) EXPECT() *MockRegistrationServiceMockRecorder {
	return m.recorder
}

// GetByNamespace mocks base method.
func (m *MockRegistrationService) GetByNamespace(ctx context.Context, baseline string) (*composite.CompositeRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNamespace", ctx, baseline)
	ret0, _ := ret[0].(*composite.CompositeRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNamespace indicates an expected call of GetByNamespace.
func (mr *MockRegistrationServiceMockRecorder) GetByNamespace(ctx, baseline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNamespace", reflect.TypeOf((*MockRegistrationService)(nil).GetByNamespace), ctx, baseline)
}

// Upsert mocks base method.
func (m *MockRegistrationService) Upsert(ctx context.Context, registrationRequest *composite.CompositeRegistration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, registrationRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockRegistrationServiceMockRecorder) Upsert(ctx, registrationRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRegistrationService)(nil).Upsert), ctx, registrationRequest)
}

// MockTenantService is a mock of TenantService interface.
type MockTenantService struct {
	ctrl     *gomock.Controller
	recorder *MockTenantServiceMockRecorder
}

// MockTenantServiceMockRecorder is the mock recorder for MockTenantService.
type MockTenantServiceMockRecorder struct {
	mock *MockTenantService
}

// NewMockTenantService creates a new mock instance.
func NewMockTenantService(ctrl *gomock.Controller) *MockTenantService {
	mock := &MockTenantService{ctrl: ctrl}
	mock.recorder = &MockTenantServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTenantService) EXPECT() *MockTenantServiceMockRecorder {
	return m.recorder
}

// GetTenantsByNamespace mocks base method.
func (m *MockTenantService) GetTenantsByNamespace(ctx context.Context, namespace string) ([]model.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantsByNamespace", ctx, namespace)
	ret0, _ := ret[0].([]model.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantsByNamespace indicates an expected call of GetTenantsByNamespace.
func (mr *MockTenantServiceMockRecorder) GetTenantsByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantsByNamespace", reflect.TypeOf((*MockTenantService)(nil).GetTenantsByNamespace), ctx, namespace)
}

// MockConfiguratorService is a mock of ConfiguratorService interface.
type MockConfiguratorService struct {
	ctrl     *gomock.Controller
	recorder *MockConfiguratorServiceMockRecorder
}

// MockConfiguratorServiceMockRecorder is the mock recorder for MockConfiguratorService.
type MockConfiguratorServiceMockRecorder struct {
	mock *MockConfiguratorService
}

// NewMockConfiguratorService creates a new mock instance.
func NewMockConfiguratorService(ctrl *gomock.Controller) *MockConfiguratorService {
	mock := &MockConfiguratorService{ctrl: ctrl}
	mock.recorder = &MockConfiguratorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfiguratorService) EXPECT() *MockConfiguratorServiceMockRecorder {
	return m.recorder
}

// ApplyConfig mocks base method.
func (m *MockConfiguratorService) ApplyConfig(ctx context.Context, raw, namespace string) ([]model.ConfigMsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyConfig", ctx, raw, namespace)
	ret0, _ := ret[0].([]model.ConfigMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyConfig indicates an expected call of ApplyConfig.
func (mr *MockConfiguratorServiceMockRecorder) ApplyConfig(ctx, raw, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyConfig", reflect.TypeOf((*MockConfiguratorService)(nil).ApplyConfig), ctx, raw, namespace)
}

// ApplyConfigV2 mocks base method.
func (m *MockConfiguratorService) ApplyConfigV2(ctx context.Context, raw string) ([]model.ConfigMsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyConfigV2", ctx, raw)
	ret0, _ := ret[0].([]model.ConfigMsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyConfigV2 indicates an expected call of ApplyConfigV2.
func (mr *MockConfiguratorServiceMockRecorder) ApplyConfigV2(ctx, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyConfigV2", reflect.TypeOf((*MockConfiguratorService)(nil).ApplyConfigV2), ctx, raw)
}

// ApplyKafkaConfiguration mocks base method.
func (m *MockConfiguratorService) ApplyKafkaConfiguration(ctx context.Context, cfg interface{}, namespace string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyKafkaConfiguration", ctx, cfg, namespace)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyKafkaConfiguration indicates an expected call of ApplyKafkaConfiguration.
func (mr *MockConfiguratorServiceMockRecorder) ApplyKafkaConfiguration(ctx, cfg, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyKafkaConfiguration", reflect.TypeOf((*MockConfiguratorService)(nil).ApplyKafkaConfiguration), ctx, cfg, namespace)
}

// ApplyKafkaDeleteTenantTopic mocks base method.
func (m *MockConfiguratorService) ApplyKafkaDeleteTenantTopic(ctx context.Context, cfg interface{}, namespace string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyKafkaDeleteTenantTopic", ctx, cfg, namespace)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyKafkaDeleteTenantTopic indicates an expected call of ApplyKafkaDeleteTenantTopic.
func (mr *MockConfiguratorServiceMockRecorder) ApplyKafkaDeleteTenantTopic(ctx, cfg, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyKafkaDeleteTenantTopic", reflect.TypeOf((*MockConfiguratorService)(nil).ApplyKafkaDeleteTenantTopic), ctx, cfg, namespace)
}

// ApplyKafkaDeleteTopic mocks base method.
func (m *MockConfiguratorService) ApplyKafkaDeleteTopic(ctx context.Context, cfg interface{}, arg2 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyKafkaDeleteTopic", ctx, cfg, arg2)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyKafkaDeleteTopic indicates an expected call of ApplyKafkaDeleteTopic.
func (mr *MockConfiguratorServiceMockRecorder) ApplyKafkaDeleteTopic(ctx, cfg, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyKafkaDeleteTopic", reflect.TypeOf((*MockConfiguratorService)(nil).ApplyKafkaDeleteTopic), ctx, cfg, arg2)
}

// ApplyKafkaDeleteTopicTemplate mocks base method.
func (m *MockConfiguratorService) ApplyKafkaDeleteTopicTemplate(ctx context.Context, cfg interface{}, namespace string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyKafkaDeleteTopicTemplate", ctx, cfg, namespace)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyKafkaDeleteTopicTemplate indicates an expected call of ApplyKafkaDeleteTopicTemplate.
func (mr *MockConfiguratorServiceMockRecorder) ApplyKafkaDeleteTopicTemplate(ctx, cfg, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyKafkaDeleteTopicTemplate", reflect.TypeOf((*MockConfiguratorService)(nil).ApplyKafkaDeleteTopicTemplate), ctx, cfg, namespace)
}

// ApplyKafkaLazyTopic mocks base method.
func (m *MockConfiguratorService) ApplyKafkaLazyTopic(ctx context.Context, cfg interface{}, namespace string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyKafkaLazyTopic", ctx, cfg, namespace)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyKafkaLazyTopic indicates an expected call of ApplyKafkaLazyTopic.
func (mr *MockConfiguratorServiceMockRecorder) ApplyKafkaLazyTopic(ctx, cfg, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyKafkaLazyTopic", reflect.TypeOf((*MockConfiguratorService)(nil).ApplyKafkaLazyTopic), ctx, cfg, namespace)
}

// ApplyKafkaTenantTopic mocks base method.
func (m *MockConfiguratorService) ApplyKafkaTenantTopic(ctx context.Context, cfg interface{}, namespace string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyKafkaTenantTopic", ctx, cfg, namespace)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyKafkaTenantTopic indicates an expected call of ApplyKafkaTenantTopic.
func (mr *MockConfiguratorServiceMockRecorder) ApplyKafkaTenantTopic(ctx, cfg, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyKafkaTenantTopic", reflect.TypeOf((*MockConfiguratorService)(nil).ApplyKafkaTenantTopic), ctx, cfg, namespace)
}

// ApplyKafkaTopicTemplate mocks base method.
func (m *MockConfiguratorService) ApplyKafkaTopicTemplate(ctx context.Context, cfg interface{}, namespace string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyKafkaTopicTemplate", ctx, cfg, namespace)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyKafkaTopicTemplate indicates an expected call of ApplyKafkaTopicTemplate.
func (mr *MockConfiguratorServiceMockRecorder) ApplyKafkaTopicTemplate(ctx, cfg, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyKafkaTopicTemplate", reflect.TypeOf((*MockConfiguratorService)(nil).ApplyKafkaTopicTemplate), ctx, cfg, namespace)
}

// ApplyRabbitConfiguration mocks base method.
func (m *MockConfiguratorService) ApplyRabbitConfiguration(ctx context.Context, cfg interface{}, namespace string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyRabbitConfiguration", ctx, cfg, namespace)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyRabbitConfiguration indicates an expected call of ApplyRabbitConfiguration.
func (mr *MockConfiguratorServiceMockRecorder) ApplyRabbitConfiguration(ctx, cfg, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyRabbitConfiguration", reflect.TypeOf((*MockConfiguratorService)(nil).ApplyRabbitConfiguration), ctx, cfg, namespace)
}
