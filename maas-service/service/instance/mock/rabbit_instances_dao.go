// Code generated by MockGen. DO NOT EDIT.
// Source: rabbit_instances_dao.go

// Package mock_instance is a generated GoMock package.
package mock_instance

import (
	context "context"
	model "maas/maas-service/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRabbitInstancesDao is a mock of RabbitInstancesDao interface.
type MockRabbitInstancesDao struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitInstancesDaoMockRecorder
}

// MockRabbitInstancesDaoMockRecorder is the mock recorder for MockRabbitInstancesDao.
type MockRabbitInstancesDaoMockRecorder struct {
	mock *MockRabbitInstancesDao
}

// NewMockRabbitInstancesDao creates a new mock instance.
func NewMockRabbitInstancesDao(ctrl *gomock.Controller) *MockRabbitInstancesDao {
	mock := &MockRabbitInstancesDao{ctrl: ctrl}
	mock.recorder = &MockRabbitInstancesDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitInstancesDao) EXPECT() *MockRabbitInstancesDaoMockRecorder {
	return m.recorder
}

// DeleteRabbitInstanceDesignatorByNamespace mocks base method.
func (m *MockRabbitInstancesDao) DeleteRabbitInstanceDesignatorByNamespace(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRabbitInstanceDesignatorByNamespace", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRabbitInstanceDesignatorByNamespace indicates an expected call of DeleteRabbitInstanceDesignatorByNamespace.
func (mr *MockRabbitInstancesDaoMockRecorder) DeleteRabbitInstanceDesignatorByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRabbitInstanceDesignatorByNamespace", reflect.TypeOf((*MockRabbitInstancesDao)(nil).DeleteRabbitInstanceDesignatorByNamespace), ctx, namespace)
}

// GetDefaultInstance mocks base method.
func (m *MockRabbitInstancesDao) GetDefaultInstance(arg0 context.Context) (*model.RabbitInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultInstance", arg0)
	ret0, _ := ret[0].(*model.RabbitInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultInstance indicates an expected call of GetDefaultInstance.
func (mr *MockRabbitInstancesDaoMockRecorder) GetDefaultInstance(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultInstance", reflect.TypeOf((*MockRabbitInstancesDao)(nil).GetDefaultInstance), arg0)
}

// GetInstanceById mocks base method.
func (m *MockRabbitInstancesDao) GetInstanceById(arg0 context.Context, arg1 string) (*model.RabbitInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceById", arg0, arg1)
	ret0, _ := ret[0].(*model.RabbitInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceById indicates an expected call of GetInstanceById.
func (mr *MockRabbitInstancesDaoMockRecorder) GetInstanceById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceById", reflect.TypeOf((*MockRabbitInstancesDao)(nil).GetInstanceById), arg0, arg1)
}

// GetRabbitInstanceDesignatorByNamespace mocks base method.
func (m *MockRabbitInstancesDao) GetRabbitInstanceDesignatorByNamespace(ctx context.Context, namespace string) (*model.InstanceDesignatorRabbit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRabbitInstanceDesignatorByNamespace", ctx, namespace)
	ret0, _ := ret[0].(*model.InstanceDesignatorRabbit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRabbitInstanceDesignatorByNamespace indicates an expected call of GetRabbitInstanceDesignatorByNamespace.
func (mr *MockRabbitInstancesDaoMockRecorder) GetRabbitInstanceDesignatorByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRabbitInstanceDesignatorByNamespace", reflect.TypeOf((*MockRabbitInstancesDao)(nil).GetRabbitInstanceDesignatorByNamespace), ctx, namespace)
}

// GetRabbitInstanceRegistrations mocks base method.
func (m *MockRabbitInstancesDao) GetRabbitInstanceRegistrations(arg0 context.Context) (*[]model.RabbitInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRabbitInstanceRegistrations", arg0)
	ret0, _ := ret[0].(*[]model.RabbitInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRabbitInstanceRegistrations indicates an expected call of GetRabbitInstanceRegistrations.
func (mr *MockRabbitInstancesDaoMockRecorder) GetRabbitInstanceRegistrations(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRabbitInstanceRegistrations", reflect.TypeOf((*MockRabbitInstancesDao)(nil).GetRabbitInstanceRegistrations), arg0)
}

// InsertInstanceDesignatorRabbit mocks base method.
func (m *MockRabbitInstancesDao) InsertInstanceDesignatorRabbit(ctx context.Context, instanceDesignator *model.InstanceDesignatorRabbit) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertInstanceDesignatorRabbit", ctx, instanceDesignator)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertInstanceDesignatorRabbit indicates an expected call of InsertInstanceDesignatorRabbit.
func (mr *MockRabbitInstancesDaoMockRecorder) InsertInstanceDesignatorRabbit(ctx, instanceDesignator interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertInstanceDesignatorRabbit", reflect.TypeOf((*MockRabbitInstancesDao)(nil).InsertInstanceDesignatorRabbit), ctx, instanceDesignator)
}

// InsertInstanceRegistration mocks base method.
func (m *MockRabbitInstancesDao) InsertInstanceRegistration(arg0 context.Context, arg1 *model.RabbitInstance) (*model.RabbitInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertInstanceRegistration", arg0, arg1)
	ret0, _ := ret[0].(*model.RabbitInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertInstanceRegistration indicates an expected call of InsertInstanceRegistration.
func (mr *MockRabbitInstancesDaoMockRecorder) InsertInstanceRegistration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertInstanceRegistration", reflect.TypeOf((*MockRabbitInstancesDao)(nil).InsertInstanceRegistration), arg0, arg1)
}

// RemoveInstanceRegistration mocks base method.
func (m *MockRabbitInstancesDao) RemoveInstanceRegistration(ctx context.Context, instanceId string) (*model.RabbitInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveInstanceRegistration", ctx, instanceId)
	ret0, _ := ret[0].(*model.RabbitInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveInstanceRegistration indicates an expected call of RemoveInstanceRegistration.
func (mr *MockRabbitInstancesDaoMockRecorder) RemoveInstanceRegistration(ctx, instanceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInstanceRegistration", reflect.TypeOf((*MockRabbitInstancesDao)(nil).RemoveInstanceRegistration), ctx, instanceId)
}

// SetDefaultInstance mocks base method.
func (m *MockRabbitInstancesDao) SetDefaultInstance(arg0 context.Context, arg1 *model.RabbitInstance) (*model.RabbitInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDefaultInstance", arg0, arg1)
	ret0, _ := ret[0].(*model.RabbitInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDefaultInstance indicates an expected call of SetDefaultInstance.
func (mr *MockRabbitInstancesDaoMockRecorder) SetDefaultInstance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDefaultInstance", reflect.TypeOf((*MockRabbitInstancesDao)(nil).SetDefaultInstance), arg0, arg1)
}

// UpdateInstanceRegistration mocks base method.
func (m *MockRabbitInstancesDao) UpdateInstanceRegistration(arg0 context.Context, arg1 *model.RabbitInstance) (*model.RabbitInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceRegistration", arg0, arg1)
	ret0, _ := ret[0].(*model.RabbitInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceRegistration indicates an expected call of UpdateInstanceRegistration.
func (mr *MockRabbitInstancesDaoMockRecorder) UpdateInstanceRegistration(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceRegistration", reflect.TypeOf((*MockRabbitInstancesDao)(nil).UpdateInstanceRegistration), arg0, arg1)
}
