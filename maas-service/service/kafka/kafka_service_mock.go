// Code generated by MockGen. DO NOT EDIT.
// Source: kafka_service.go

// Package kafka is a generated GoMock package.
package kafka

import (
	context "context"
	eventbus "maas/maas-service/eventbus"
	model "maas/maas-service/model"
	domain "maas/maas-service/service/bg2/domain"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockKafkaDao is a mock of KafkaDao interface.
type MockKafkaDao struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaDaoMockRecorder
}

// MockKafkaDaoMockRecorder is the mock recorder for MockKafkaDao.
type MockKafkaDaoMockRecorder struct {
	mock *MockKafkaDao
}

// NewMockKafkaDao creates a new mock instance.
func NewMockKafkaDao(ctrl *gomock.Controller) *MockKafkaDao {
	mock := &MockKafkaDao{ctrl: ctrl}
	mock.recorder = &MockKafkaDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaDao) EXPECT() *MockKafkaDaoMockRecorder {
	return m.recorder
}

// DeleteTopicDefinition mocks base method.
func (m *MockKafkaDao) DeleteTopicDefinition(ctx context.Context, classifier *model.Classifier) (*model.TopicDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopicDefinition", ctx, classifier)
	ret0, _ := ret[0].(*model.TopicDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTopicDefinition indicates an expected call of DeleteTopicDefinition.
func (mr *MockKafkaDaoMockRecorder) DeleteTopicDefinition(ctx, classifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicDefinition", reflect.TypeOf((*MockKafkaDao)(nil).DeleteTopicDefinition), ctx, classifier)
}

// DeleteTopicDefinitionsByNamespace mocks base method.
func (m *MockKafkaDao) DeleteTopicDefinitionsByNamespace(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopicDefinitionsByNamespace", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopicDefinitionsByNamespace indicates an expected call of DeleteTopicDefinitionsByNamespace.
func (mr *MockKafkaDaoMockRecorder) DeleteTopicDefinitionsByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicDefinitionsByNamespace", reflect.TypeOf((*MockKafkaDao)(nil).DeleteTopicDefinitionsByNamespace), ctx, namespace)
}

// DeleteTopicRegistration mocks base method.
func (m *MockKafkaDao) DeleteTopicRegistration(ctx context.Context, registration *model.TopicRegistration, ext func(*model.TopicRegistration) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopicRegistration", ctx, registration, ext)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopicRegistration indicates an expected call of DeleteTopicRegistration.
func (mr *MockKafkaDaoMockRecorder) DeleteTopicRegistration(ctx, registration, ext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicRegistration", reflect.TypeOf((*MockKafkaDao)(nil).DeleteTopicRegistration), ctx, registration, ext)
}

// DeleteTopicTemplate mocks base method.
func (m *MockKafkaDao) DeleteTopicTemplate(ctx context.Context, template *model.TopicTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopicTemplate", ctx, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopicTemplate indicates an expected call of DeleteTopicTemplate.
func (mr *MockKafkaDaoMockRecorder) DeleteTopicTemplate(ctx, template interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicTemplate", reflect.TypeOf((*MockKafkaDao)(nil).DeleteTopicTemplate), ctx, template)
}

// DeleteTopicTemplatesByNamespace mocks base method.
func (m *MockKafkaDao) DeleteTopicTemplatesByNamespace(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopicTemplatesByNamespace", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopicTemplatesByNamespace indicates an expected call of DeleteTopicTemplatesByNamespace.
func (mr *MockKafkaDaoMockRecorder) DeleteTopicTemplatesByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicTemplatesByNamespace", reflect.TypeOf((*MockKafkaDao)(nil).DeleteTopicTemplatesByNamespace), ctx, namespace)
}

// FindAllTopicTemplatesByNamespace mocks base method.
func (m *MockKafkaDao) FindAllTopicTemplatesByNamespace(ctx context.Context, namespace string) ([]model.TopicTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllTopicTemplatesByNamespace", ctx, namespace)
	ret0, _ := ret[0].([]model.TopicTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllTopicTemplatesByNamespace indicates an expected call of FindAllTopicTemplatesByNamespace.
func (mr *MockKafkaDaoMockRecorder) FindAllTopicTemplatesByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllTopicTemplatesByNamespace", reflect.TypeOf((*MockKafkaDao)(nil).FindAllTopicTemplatesByNamespace), ctx, namespace)
}

// FindTopicDefinitions mocks base method.
func (m *MockKafkaDao) FindTopicDefinitions(ctx context.Context, search TopicDefinitionSearch) ([]model.TopicDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTopicDefinitions", ctx, search)
	ret0, _ := ret[0].([]model.TopicDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTopicDefinitions indicates an expected call of FindTopicDefinitions.
func (mr *MockKafkaDaoMockRecorder) FindTopicDefinitions(ctx, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTopicDefinitions", reflect.TypeOf((*MockKafkaDao)(nil).FindTopicDefinitions), ctx, search)
}

// FindTopicTemplateById mocks base method.
func (m *MockKafkaDao) FindTopicTemplateById(ctx context.Context, id int64) (*model.TopicTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTopicTemplateById", ctx, id)
	ret0, _ := ret[0].(*model.TopicTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTopicTemplateById indicates an expected call of FindTopicTemplateById.
func (mr *MockKafkaDaoMockRecorder) FindTopicTemplateById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTopicTemplateById", reflect.TypeOf((*MockKafkaDao)(nil).FindTopicTemplateById), ctx, id)
}

// FindTopicTemplateByNameAndNamespace mocks base method.
func (m *MockKafkaDao) FindTopicTemplateByNameAndNamespace(ctx context.Context, name, namespace string) (*model.TopicTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTopicTemplateByNameAndNamespace", ctx, name, namespace)
	ret0, _ := ret[0].(*model.TopicTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTopicTemplateByNameAndNamespace indicates an expected call of FindTopicTemplateByNameAndNamespace.
func (mr *MockKafkaDaoMockRecorder) FindTopicTemplateByNameAndNamespace(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTopicTemplateByNameAndNamespace", reflect.TypeOf((*MockKafkaDao)(nil).FindTopicTemplateByNameAndNamespace), ctx, name, namespace)
}

// FindTopicsBySearchRequest mocks base method.
func (m *MockKafkaDao) FindTopicsBySearchRequest(ctx context.Context, search *model.TopicSearchRequest) ([]*model.TopicRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTopicsBySearchRequest", ctx, search)
	ret0, _ := ret[0].([]*model.TopicRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTopicsBySearchRequest indicates an expected call of FindTopicsBySearchRequest.
func (mr *MockKafkaDaoMockRecorder) FindTopicsBySearchRequest(ctx, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTopicsBySearchRequest", reflect.TypeOf((*MockKafkaDao)(nil).FindTopicsBySearchRequest), ctx, search)
}

// FindTopicsByTemplate mocks base method.
func (m *MockKafkaDao) FindTopicsByTemplate(ctx context.Context, topicTemplate *model.TopicTemplate) ([]model.TopicRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindTopicsByTemplate", ctx, topicTemplate)
	ret0, _ := ret[0].([]model.TopicRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindTopicsByTemplate indicates an expected call of FindTopicsByTemplate.
func (mr *MockKafkaDaoMockRecorder) FindTopicsByTemplate(ctx, topicTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindTopicsByTemplate", reflect.TypeOf((*MockKafkaDao)(nil).FindTopicsByTemplate), ctx, topicTemplate)
}

// InsertTopicDefinition mocks base method.
func (m *MockKafkaDao) InsertTopicDefinition(ctx context.Context, topicDefinition *model.TopicDefinition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTopicDefinition", ctx, topicDefinition)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTopicDefinition indicates an expected call of InsertTopicDefinition.
func (mr *MockKafkaDaoMockRecorder) InsertTopicDefinition(ctx, topicDefinition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTopicDefinition", reflect.TypeOf((*MockKafkaDao)(nil).InsertTopicDefinition), ctx, topicDefinition)
}

// InsertTopicRegistration mocks base method.
func (m *MockKafkaDao) InsertTopicRegistration(ctx context.Context, reg *model.TopicRegistration, ext func(*model.TopicRegistration) (*model.TopicRegistrationRespDto, error)) (*model.TopicRegistrationRespDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTopicRegistration", ctx, reg, ext)
	ret0, _ := ret[0].(*model.TopicRegistrationRespDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTopicRegistration indicates an expected call of InsertTopicRegistration.
func (mr *MockKafkaDaoMockRecorder) InsertTopicRegistration(ctx, reg, ext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTopicRegistration", reflect.TypeOf((*MockKafkaDao)(nil).InsertTopicRegistration), ctx, reg, ext)
}

// InsertTopicTemplate mocks base method.
func (m *MockKafkaDao) InsertTopicTemplate(ctx context.Context, topicTemplate *model.TopicTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTopicTemplate", ctx, topicTemplate)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTopicTemplate indicates an expected call of InsertTopicTemplate.
func (mr *MockKafkaDaoMockRecorder) InsertTopicTemplate(ctx, topicTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTopicTemplate", reflect.TypeOf((*MockKafkaDao)(nil).InsertTopicTemplate), ctx, topicTemplate)
}

// MakeTopicsDirtyByTemplate mocks base method.
func (m *MockKafkaDao) MakeTopicsDirtyByTemplate(ctx context.Context, topicTemplate *model.TopicTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeTopicsDirtyByTemplate", ctx, topicTemplate)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeTopicsDirtyByTemplate indicates an expected call of MakeTopicsDirtyByTemplate.
func (mr *MockKafkaDaoMockRecorder) MakeTopicsDirtyByTemplate(ctx, topicTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTopicsDirtyByTemplate", reflect.TypeOf((*MockKafkaDao)(nil).MakeTopicsDirtyByTemplate), ctx, topicTemplate)
}

// Migrate mocks base method.
func (m *MockKafkaDao) Migrate(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Migrate", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Migrate indicates an expected call of Migrate.
func (mr *MockKafkaDaoMockRecorder) Migrate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Migrate", reflect.TypeOf((*MockKafkaDao)(nil).Migrate), ctx)
}

// UpdateTopicDefinition mocks base method.
func (m *MockKafkaDao) UpdateTopicDefinition(ctx context.Context, topicDefinition *model.TopicDefinition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopicDefinition", ctx, topicDefinition)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTopicDefinition indicates an expected call of UpdateTopicDefinition.
func (mr *MockKafkaDaoMockRecorder) UpdateTopicDefinition(ctx, topicDefinition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopicDefinition", reflect.TypeOf((*MockKafkaDao)(nil).UpdateTopicDefinition), ctx, topicDefinition)
}

// UpdateTopicRegistration mocks base method.
func (m *MockKafkaDao) UpdateTopicRegistration(ctx context.Context, reg *model.TopicRegistration, ext func(*model.TopicRegistration) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopicRegistration", ctx, reg, ext)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTopicRegistration indicates an expected call of UpdateTopicRegistration.
func (mr *MockKafkaDaoMockRecorder) UpdateTopicRegistration(ctx, reg, ext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopicRegistration", reflect.TypeOf((*MockKafkaDao)(nil).UpdateTopicRegistration), ctx, reg, ext)
}

// UpdateTopicTemplate mocks base method.
func (m *MockKafkaDao) UpdateTopicTemplate(ctx context.Context, topicTemplate *model.TopicTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopicTemplate", ctx, topicTemplate)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTopicTemplate indicates an expected call of UpdateTopicTemplate.
func (mr *MockKafkaDaoMockRecorder) UpdateTopicTemplate(ctx, topicTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopicTemplate", reflect.TypeOf((*MockKafkaDao)(nil).UpdateTopicTemplate), ctx, topicTemplate)
}

// Warmup mocks base method.
func (m *MockKafkaDao) Warmup(ctx context.Context, primary, secondary string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warmup", ctx, primary, secondary)
	ret0, _ := ret[0].(error)
	return ret0
}

// Warmup indicates an expected call of Warmup.
func (mr *MockKafkaDaoMockRecorder) Warmup(ctx, primary, secondary interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warmup", reflect.TypeOf((*MockKafkaDao)(nil).Warmup), ctx, primary, secondary)
}

// WithLock mocks base method.
func (m *MockKafkaDao) WithLock(ctx context.Context, lockId string, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLock", ctx, lockId, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithLock indicates an expected call of WithLock.
func (mr *MockKafkaDaoMockRecorder) WithLock(ctx, lockId, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLock", reflect.TypeOf((*MockKafkaDao)(nil).WithLock), ctx, lockId, f)
}

// MockKafkaService is a mock of KafkaService interface.
type MockKafkaService struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaServiceMockRecorder
}

// MockKafkaServiceMockRecorder is the mock recorder for MockKafkaService.
type MockKafkaServiceMockRecorder struct {
	mock *MockKafkaService
}

// NewMockKafkaService creates a new mock instance.
func NewMockKafkaService(ctrl *gomock.Controller) *MockKafkaService {
	mock := &MockKafkaService{ctrl: ctrl}
	mock.recorder = &MockKafkaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaService) EXPECT() *MockKafkaServiceMockRecorder {
	return m.recorder
}

// CleanupNamespace mocks base method.
func (m *MockKafkaService) CleanupNamespace(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupNamespace", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupNamespace indicates an expected call of CleanupNamespace.
func (mr *MockKafkaServiceMockRecorder) CleanupNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupNamespace", reflect.TypeOf((*MockKafkaService)(nil).CleanupNamespace), ctx, namespace)
}

// Commit mocks base method.
func (m *MockKafkaService) Commit(ctx context.Context, state *domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockKafkaServiceMockRecorder) Commit(ctx, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockKafkaService)(nil).Commit), ctx, state)
}

// CreateTopicByTenantTopic mocks base method.
func (m *MockKafkaService) CreateTopicByTenantTopic(ctx context.Context, topicDefinition model.TopicDefinition, tenant model.Tenant) (*model.TopicRegistrationRespDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopicByTenantTopic", ctx, topicDefinition, tenant)
	ret0, _ := ret[0].(*model.TopicRegistrationRespDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopicByTenantTopic indicates an expected call of CreateTopicByTenantTopic.
func (mr *MockKafkaServiceMockRecorder) CreateTopicByTenantTopic(ctx, topicDefinition, tenant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopicByTenantTopic", reflect.TypeOf((*MockKafkaService)(nil).CreateTopicByTenantTopic), ctx, topicDefinition, tenant)
}

// CreateTopicTemplate mocks base method.
func (m *MockKafkaService) CreateTopicTemplate(ctx context.Context, topicTemplate *model.TopicTemplate) (*model.TopicTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopicTemplate", ctx, topicTemplate)
	ret0, _ := ret[0].(*model.TopicTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopicTemplate indicates an expected call of CreateTopicTemplate.
func (mr *MockKafkaServiceMockRecorder) CreateTopicTemplate(ctx, topicTemplate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopicTemplate", reflect.TypeOf((*MockKafkaService)(nil).CreateTopicTemplate), ctx, topicTemplate)
}

// DeleteTopic mocks base method.
func (m *MockKafkaService) DeleteTopic(ctx context.Context, topic *model.TopicRegistration, leaveRealTopicIntact bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopic", ctx, topic, leaveRealTopicIntact)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTopic indicates an expected call of DeleteTopic.
func (mr *MockKafkaServiceMockRecorder) DeleteTopic(ctx, topic, leaveRealTopicIntact interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopic", reflect.TypeOf((*MockKafkaService)(nil).DeleteTopic), ctx, topic, leaveRealTopicIntact)
}

// DeleteTopicDefinition mocks base method.
func (m *MockKafkaService) DeleteTopicDefinition(ctx context.Context, classifier *model.Classifier) (*model.TopicDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopicDefinition", ctx, classifier)
	ret0, _ := ret[0].(*model.TopicDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTopicDefinition indicates an expected call of DeleteTopicDefinition.
func (mr *MockKafkaServiceMockRecorder) DeleteTopicDefinition(ctx, classifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicDefinition", reflect.TypeOf((*MockKafkaService)(nil).DeleteTopicDefinition), ctx, classifier)
}

// DeleteTopicTemplate mocks base method.
func (m *MockKafkaService) DeleteTopicTemplate(ctx context.Context, name, namespace string) (*model.TopicTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopicTemplate", ctx, name, namespace)
	ret0, _ := ret[0].(*model.TopicTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTopicTemplate indicates an expected call of DeleteTopicTemplate.
func (mr *MockKafkaServiceMockRecorder) DeleteTopicTemplate(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopicTemplate", reflect.TypeOf((*MockKafkaService)(nil).DeleteTopicTemplate), ctx, name, namespace)
}

// DeleteTopics mocks base method.
func (m *MockKafkaService) DeleteTopics(ctx context.Context, searchReq *model.TopicSearchRequest) (*model.TopicDeletionResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTopics", ctx, searchReq)
	ret0, _ := ret[0].(*model.TopicDeletionResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteTopics indicates an expected call of DeleteTopics.
func (mr *MockKafkaServiceMockRecorder) DeleteTopics(ctx, searchReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTopics", reflect.TypeOf((*MockKafkaService)(nil).DeleteTopics), ctx, searchReq)
}

// DestroyDomain mocks base method.
func (m *MockKafkaService) DestroyDomain(ctx context.Context, namespaces *domain.BGNamespaces) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyDomain", ctx, namespaces)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyDomain indicates an expected call of DestroyDomain.
func (mr *MockKafkaServiceMockRecorder) DestroyDomain(ctx, namespaces interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyDomain", reflect.TypeOf((*MockKafkaService)(nil).DestroyDomain), ctx, namespaces)
}

// GetDiscrepancyReport mocks base method.
func (m *MockKafkaService) GetDiscrepancyReport(ctx context.Context, namespace string, filter func(model.DiscrepancyReportItem) bool) ([]model.DiscrepancyReportItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDiscrepancyReport", ctx, namespace, filter)
	ret0, _ := ret[0].([]model.DiscrepancyReportItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDiscrepancyReport indicates an expected call of GetDiscrepancyReport.
func (mr *MockKafkaServiceMockRecorder) GetDiscrepancyReport(ctx, namespace, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDiscrepancyReport", reflect.TypeOf((*MockKafkaService)(nil).GetDiscrepancyReport), ctx, namespace, filter)
}

// GetKafkaTopicTemplatesByNamespace mocks base method.
func (m *MockKafkaService) GetKafkaTopicTemplatesByNamespace(ctx context.Context, namespace string) ([]model.TopicTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKafkaTopicTemplatesByNamespace", ctx, namespace)
	ret0, _ := ret[0].([]model.TopicTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKafkaTopicTemplatesByNamespace indicates an expected call of GetKafkaTopicTemplatesByNamespace.
func (mr *MockKafkaServiceMockRecorder) GetKafkaTopicTemplatesByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKafkaTopicTemplatesByNamespace", reflect.TypeOf((*MockKafkaService)(nil).GetKafkaTopicTemplatesByNamespace), ctx, namespace)
}

// GetOrCreateLazyTopic mocks base method.
func (m *MockKafkaService) GetOrCreateLazyTopic(ctx context.Context, classifier *model.Classifier, onTopicExists model.OnEntityExistsEnum) (bool, *model.TopicRegistrationRespDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateLazyTopic", ctx, classifier, onTopicExists)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.TopicRegistrationRespDto)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrCreateLazyTopic indicates an expected call of GetOrCreateLazyTopic.
func (mr *MockKafkaServiceMockRecorder) GetOrCreateLazyTopic(ctx, classifier, onTopicExists interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateLazyTopic", reflect.TypeOf((*MockKafkaService)(nil).GetOrCreateLazyTopic), ctx, classifier, onTopicExists)
}

// GetOrCreateTopic mocks base method.
func (m *MockKafkaService) GetOrCreateTopic(ctx context.Context, topic *model.TopicRegistration, onTopicExists model.OnEntityExistsEnum) (bool, *model.TopicRegistrationRespDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateTopic", ctx, topic, onTopicExists)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.TopicRegistrationRespDto)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrCreateTopic indicates an expected call of GetOrCreateTopic.
func (mr *MockKafkaServiceMockRecorder) GetOrCreateTopic(ctx, topic, onTopicExists interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateTopic", reflect.TypeOf((*MockKafkaService)(nil).GetOrCreateTopic), ctx, topic, onTopicExists)
}

// GetOrCreateTopicDefinition mocks base method.
func (m *MockKafkaService) GetOrCreateTopicDefinition(ctx context.Context, topicDefinition *model.TopicDefinition) (bool, *model.TopicDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateTopicDefinition", ctx, topicDefinition)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.TopicDefinition)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrCreateTopicDefinition indicates an expected call of GetOrCreateTopicDefinition.
func (mr *MockKafkaServiceMockRecorder) GetOrCreateTopicDefinition(ctx, topicDefinition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateTopicDefinition", reflect.TypeOf((*MockKafkaService)(nil).GetOrCreateTopicDefinition), ctx, topicDefinition)
}

// GetOrCreateTopicWithAuth mocks base method.
func (m *MockKafkaService) GetOrCreateTopicWithAuth(ctx context.Context, topic *model.TopicRegistration, onTopicExists model.OnEntityExistsEnum, auth func(context.Context, string, *model.Classifier) error) (bool, *model.TopicRegistrationRespDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateTopicWithAuth", ctx, topic, onTopicExists, auth)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.TopicRegistrationRespDto)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrCreateTopicWithAuth indicates an expected call of GetOrCreateTopicWithAuth.
func (mr *MockKafkaServiceMockRecorder) GetOrCreateTopicWithAuth(ctx, topic, onTopicExists, auth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateTopicWithAuth", reflect.TypeOf((*MockKafkaService)(nil).GetOrCreateTopicWithAuth), ctx, topic, onTopicExists, auth)
}

// GetTopicByClassifier mocks base method.
func (m *MockKafkaService) GetTopicByClassifier(ctx context.Context, classifier model.Classifier) (*model.TopicRegistrationRespDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicByClassifier", ctx, classifier)
	ret0, _ := ret[0].(*model.TopicRegistrationRespDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicByClassifier indicates an expected call of GetTopicByClassifier.
func (mr *MockKafkaServiceMockRecorder) GetTopicByClassifier(ctx, classifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicByClassifier", reflect.TypeOf((*MockKafkaService)(nil).GetTopicByClassifier), ctx, classifier)
}

// GetTopicByClassifierWithBgDomain mocks base method.
func (m *MockKafkaService) GetTopicByClassifierWithBgDomain(ctx context.Context, classifier model.Classifier) (*model.TopicRegistrationRespDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicByClassifierWithBgDomain", ctx, classifier)
	ret0, _ := ret[0].(*model.TopicRegistrationRespDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicByClassifierWithBgDomain indicates an expected call of GetTopicByClassifierWithBgDomain.
func (mr *MockKafkaServiceMockRecorder) GetTopicByClassifierWithBgDomain(ctx, classifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicByClassifierWithBgDomain", reflect.TypeOf((*MockKafkaService)(nil).GetTopicByClassifierWithBgDomain), ctx, classifier)
}

// GetTopicDefinitionsByNamespaceAndKind mocks base method.
func (m *MockKafkaService) GetTopicDefinitionsByNamespaceAndKind(ctx context.Context, namespace, kind string) ([]model.TopicDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicDefinitionsByNamespaceAndKind", ctx, namespace, kind)
	ret0, _ := ret[0].([]model.TopicDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicDefinitionsByNamespaceAndKind indicates an expected call of GetTopicDefinitionsByNamespaceAndKind.
func (mr *MockKafkaServiceMockRecorder) GetTopicDefinitionsByNamespaceAndKind(ctx, namespace, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicDefinitionsByNamespaceAndKind", reflect.TypeOf((*MockKafkaService)(nil).GetTopicDefinitionsByNamespaceAndKind), ctx, namespace, kind)
}

// GetTopicTemplateByNameAndNamespace mocks base method.
func (m *MockKafkaService) GetTopicTemplateByNameAndNamespace(ctx context.Context, name, namespace string) (*model.TopicTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicTemplateByNameAndNamespace", ctx, name, namespace)
	ret0, _ := ret[0].(*model.TopicTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicTemplateByNameAndNamespace indicates an expected call of GetTopicTemplateByNameAndNamespace.
func (mr *MockKafkaServiceMockRecorder) GetTopicTemplateByNameAndNamespace(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicTemplateByNameAndNamespace", reflect.TypeOf((*MockKafkaService)(nil).GetTopicTemplateByNameAndNamespace), ctx, name, namespace)
}

// MakeTopicsDirtyByTemplate mocks base method.
func (m *MockKafkaService) MakeTopicsDirtyByTemplate(ctx context.Context, template *model.TopicTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeTopicsDirtyByTemplate", ctx, template)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeTopicsDirtyByTemplate indicates an expected call of MakeTopicsDirtyByTemplate.
func (mr *MockKafkaServiceMockRecorder) MakeTopicsDirtyByTemplate(ctx, template interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeTopicsDirtyByTemplate", reflect.TypeOf((*MockKafkaService)(nil).MakeTopicsDirtyByTemplate), ctx, template)
}

// MigrateKafka mocks base method.
func (m *MockKafkaService) MigrateKafka(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateKafka", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// MigrateKafka indicates an expected call of MigrateKafka.
func (mr *MockKafkaServiceMockRecorder) MigrateKafka(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateKafka", reflect.TypeOf((*MockKafkaService)(nil).MigrateKafka), ctx)
}

// Promote mocks base method.
func (m *MockKafkaService) Promote(ctx context.Context, state *domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Promote", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Promote indicates an expected call of Promote.
func (mr *MockKafkaServiceMockRecorder) Promote(ctx, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Promote", reflect.TypeOf((*MockKafkaService)(nil).Promote), ctx, state)
}

// Rollback mocks base method.
func (m *MockKafkaService) Rollback(ctx context.Context, state *domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockKafkaServiceMockRecorder) Rollback(ctx, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockKafkaService)(nil).Rollback), ctx, state)
}

// SearchTopics mocks base method.
func (m *MockKafkaService) SearchTopics(ctx context.Context, searchReq *model.TopicSearchRequest) ([]*model.TopicRegistrationRespDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTopics", ctx, searchReq)
	ret0, _ := ret[0].([]*model.TopicRegistrationRespDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTopics indicates an expected call of SearchTopics.
func (mr *MockKafkaServiceMockRecorder) SearchTopics(ctx, searchReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTopics", reflect.TypeOf((*MockKafkaService)(nil).SearchTopics), ctx, searchReq)
}

// SearchTopicsInDB mocks base method.
func (m *MockKafkaService) SearchTopicsInDB(ctx context.Context, searchReq *model.TopicSearchRequest) ([]*model.TopicRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTopicsInDB", ctx, searchReq)
	ret0, _ := ret[0].([]*model.TopicRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTopicsInDB indicates an expected call of SearchTopicsInDB.
func (mr *MockKafkaServiceMockRecorder) SearchTopicsInDB(ctx, searchReq interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTopicsInDB", reflect.TypeOf((*MockKafkaService)(nil).SearchTopicsInDB), ctx, searchReq)
}

// SyncAllTopicsToKafka mocks base method.
func (m *MockKafkaService) SyncAllTopicsToKafka(ctx context.Context, namespace string) ([]model.KafkaTopicSyncReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncAllTopicsToKafka", ctx, namespace)
	ret0, _ := ret[0].([]model.KafkaTopicSyncReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncAllTopicsToKafka indicates an expected call of SyncAllTopicsToKafka.
func (mr *MockKafkaServiceMockRecorder) SyncAllTopicsToKafka(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAllTopicsToKafka", reflect.TypeOf((*MockKafkaService)(nil).SyncAllTopicsToKafka), ctx, namespace)
}

// SyncTopicToKafka mocks base method.
func (m *MockKafkaService) SyncTopicToKafka(ctx context.Context, classifier model.Classifier) (*model.KafkaTopicSyncReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncTopicToKafka", ctx, classifier)
	ret0, _ := ret[0].(*model.KafkaTopicSyncReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncTopicToKafka indicates an expected call of SyncTopicToKafka.
func (mr *MockKafkaServiceMockRecorder) SyncTopicToKafka(ctx, classifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncTopicToKafka", reflect.TypeOf((*MockKafkaService)(nil).SyncTopicToKafka), ctx, classifier)
}

// UpdateTopicSettingsByTemplate mocks base method.
func (m *MockKafkaService) UpdateTopicSettingsByTemplate(ctx context.Context, topic model.TopicRegistration, template model.TopicTemplate) (*model.TopicRegistrationRespDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopicSettingsByTemplate", ctx, topic, template)
	ret0, _ := ret[0].(*model.TopicRegistrationRespDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTopicSettingsByTemplate indicates an expected call of UpdateTopicSettingsByTemplate.
func (mr *MockKafkaServiceMockRecorder) UpdateTopicSettingsByTemplate(ctx, topic, template interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopicSettingsByTemplate", reflect.TypeOf((*MockKafkaService)(nil).UpdateTopicSettingsByTemplate), ctx, topic, template)
}

// UpdateTopicTemplate mocks base method.
func (m *MockKafkaService) UpdateTopicTemplate(ctx context.Context, template model.TopicTemplate, settings model.TopicSettings) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTopicTemplate", ctx, template, settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTopicTemplate indicates an expected call of UpdateTopicTemplate.
func (mr *MockKafkaServiceMockRecorder) UpdateTopicTemplate(ctx, template, settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTopicTemplate", reflect.TypeOf((*MockKafkaService)(nil).UpdateTopicTemplate), ctx, template, settings)
}

// Warmup mocks base method.
func (m *MockKafkaService) Warmup(ctx context.Context, state *domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warmup", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Warmup indicates an expected call of Warmup.
func (mr *MockKafkaServiceMockRecorder) Warmup(ctx, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warmup", reflect.TypeOf((*MockKafkaService)(nil).Warmup), ctx, state)
}

// WatchTopicsCreate mocks base method.
func (m *MockKafkaService) WatchTopicsCreate(ctx context.Context, classifiers []model.Classifier, timeout time.Duration) ([]*model.TopicRegistrationRespDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchTopicsCreate", ctx, classifiers, timeout)
	ret0, _ := ret[0].([]*model.TopicRegistrationRespDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTopicsCreate indicates an expected call of WatchTopicsCreate.
func (mr *MockKafkaServiceMockRecorder) WatchTopicsCreate(ctx, classifiers, timeout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTopicsCreate", reflect.TypeOf((*MockKafkaService)(nil).WatchTopicsCreate), ctx, classifiers, timeout)
}

// MockEventBus is a mock of EventBus interface.
type MockEventBus struct {
	ctrl     *gomock.Controller
	recorder *MockEventBusMockRecorder
}

// MockEventBusMockRecorder is the mock recorder for MockEventBus.
type MockEventBusMockRecorder struct {
	mock *MockEventBus
}

// NewMockEventBus creates a new mock instance.
func NewMockEventBus(ctrl *gomock.Controller) *MockEventBus {
	mock := &MockEventBus{ctrl: ctrl}
	mock.recorder = &MockEventBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventBus) EXPECT() *MockEventBusMockRecorder {
	return m.recorder
}

// AddListener mocks base method.
func (m *MockEventBus) AddListener(listener eventbus.Listener) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddListener", listener)
}

// AddListener indicates an expected call of AddListener.
func (mr *MockEventBusMockRecorder) AddListener(listener interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddListener", reflect.TypeOf((*MockEventBus)(nil).AddListener), listener)
}

// Broadcast mocks base method.
func (m *MockEventBus) Broadcast(ctx context.Context, kind, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Broadcast", ctx, kind, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Broadcast indicates an expected call of Broadcast.
func (mr *MockEventBusMockRecorder) Broadcast(ctx, kind, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Broadcast", reflect.TypeOf((*MockEventBus)(nil).Broadcast), ctx, kind, message)
}

// MockBGDomainService is a mock of BGDomainService interface.
type MockBGDomainService struct {
	ctrl     *gomock.Controller
	recorder *MockBGDomainServiceMockRecorder
}

// MockBGDomainServiceMockRecorder is the mock recorder for MockBGDomainService.
type MockBGDomainServiceMockRecorder struct {
	mock *MockBGDomainService
}

// NewMockBGDomainService creates a new mock instance.
func NewMockBGDomainService(ctrl *gomock.Controller) *MockBGDomainService {
	mock := &MockBGDomainService{ctrl: ctrl}
	mock.recorder = &MockBGDomainServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBGDomainService) EXPECT() *MockBGDomainServiceMockRecorder {
	return m.recorder
}

// FindByNamespace mocks base method.
func (m *MockBGDomainService) FindByNamespace(ctx context.Context, namespace string) (*domain.BGNamespaces, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNamespace", ctx, namespace)
	ret0, _ := ret[0].(*domain.BGNamespaces)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNamespace indicates an expected call of FindByNamespace.
func (mr *MockBGDomainServiceMockRecorder) FindByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNamespace", reflect.TypeOf((*MockBGDomainService)(nil).FindByNamespace), ctx, namespace)
}
