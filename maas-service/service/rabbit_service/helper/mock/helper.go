// Code generated by MockGen. DO NOT EDIT.
// Source: rabbit_helper.go

// Package mock_helper is a generated GoMock package.
package mock_helper

import (
	context "context"
	model "maas/maas-service/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRabbitHelper is a mock of RabbitHelper interface.
type MockRabbitHelper struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitHelperMockRecorder
}

// MockRabbitHelperMockRecorder is the mock recorder for MockRabbitHelper.
type MockRabbitHelperMockRecorder struct {
	mock *MockRabbitHelper
}

// NewMockRabbitHelper creates a new mock instance.
func NewMockRabbitHelper(ctrl *gomock.Controller) *MockRabbitHelper {
	mock := &MockRabbitHelper{ctrl: ctrl}
	mock.recorder = &MockRabbitHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitHelper) EXPECT() *MockRabbitHelperMockRecorder {
	return m.recorder
}

// CreateBinding mocks base method.
func (m *MockRabbitHelper) CreateBinding(ctx context.Context, binding interface{}) (interface{}, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBinding", ctx, binding)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBinding indicates an expected call of CreateBinding.
func (mr *MockRabbitHelperMockRecorder) CreateBinding(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBinding", reflect.TypeOf((*MockRabbitHelper)(nil).CreateBinding), ctx, binding)
}

// CreateExchange mocks base method.
func (m *MockRabbitHelper) CreateExchange(ctx context.Context, exchange interface{}) (interface{}, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExchange", ctx, exchange)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateExchange indicates an expected call of CreateExchange.
func (mr *MockRabbitHelperMockRecorder) CreateExchange(ctx, exchange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExchange", reflect.TypeOf((*MockRabbitHelper)(nil).CreateExchange), ctx, exchange)
}

// CreateExchangeBinding mocks base method.
func (m *MockRabbitHelper) CreateExchangeBinding(ctx context.Context, binding interface{}) (interface{}, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExchangeBinding", ctx, binding)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateExchangeBinding indicates an expected call of CreateExchangeBinding.
func (mr *MockRabbitHelperMockRecorder) CreateExchangeBinding(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExchangeBinding", reflect.TypeOf((*MockRabbitHelper)(nil).CreateExchangeBinding), ctx, binding)
}

// CreateNormalOrLazyBinding mocks base method.
func (m *MockRabbitHelper) CreateNormalOrLazyBinding(ctx context.Context, binding map[string]interface{}) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNormalOrLazyBinding", ctx, binding)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNormalOrLazyBinding indicates an expected call of CreateNormalOrLazyBinding.
func (mr *MockRabbitHelperMockRecorder) CreateNormalOrLazyBinding(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNormalOrLazyBinding", reflect.TypeOf((*MockRabbitHelper)(nil).CreateNormalOrLazyBinding), ctx, binding)
}

// CreateOrUpdateUser mocks base method.
func (m *MockRabbitHelper) CreateOrUpdateUser(ctx context.Context, user, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateUser", ctx, user, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateUser indicates an expected call of CreateOrUpdateUser.
func (mr *MockRabbitHelperMockRecorder) CreateOrUpdateUser(ctx, user, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateUser", reflect.TypeOf((*MockRabbitHelper)(nil).CreateOrUpdateUser), ctx, user, password)
}

// CreatePolicy mocks base method.
func (m *MockRabbitHelper) CreatePolicy(ctx context.Context, policy interface{}) (interface{}, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", ctx, policy)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockRabbitHelperMockRecorder) CreatePolicy(ctx, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockRabbitHelper)(nil).CreatePolicy), ctx, policy)
}

// CreateQueue mocks base method.
func (m *MockRabbitHelper) CreateQueue(ctx context.Context, queue interface{}) (interface{}, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueue", ctx, queue)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateQueue indicates an expected call of CreateQueue.
func (mr *MockRabbitHelperMockRecorder) CreateQueue(ctx, queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueue", reflect.TypeOf((*MockRabbitHelper)(nil).CreateQueue), ctx, queue)
}

// CreateQueuesAndShovelsForExportedExchange mocks base method.
func (m *MockRabbitHelper) CreateQueuesAndShovelsForExportedExchange(ctx context.Context, vhostAndVersion []model.VhostAndVersion, exchange model.Exchange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQueuesAndShovelsForExportedExchange", ctx, vhostAndVersion, exchange)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateQueuesAndShovelsForExportedExchange indicates an expected call of CreateQueuesAndShovelsForExportedExchange.
func (mr *MockRabbitHelperMockRecorder) CreateQueuesAndShovelsForExportedExchange(ctx, vhostAndVersion, exchange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQueuesAndShovelsForExportedExchange", reflect.TypeOf((*MockRabbitHelper)(nil).CreateQueuesAndShovelsForExportedExchange), ctx, vhostAndVersion, exchange)
}

// CreateShovelForExportedQueue mocks base method.
func (m *MockRabbitHelper) CreateShovelForExportedQueue(ctx context.Context, vhosts []model.VHostRegistration, queue model.Queue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShovelForExportedQueue", ctx, vhosts, queue)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateShovelForExportedQueue indicates an expected call of CreateShovelForExportedQueue.
func (mr *MockRabbitHelperMockRecorder) CreateShovelForExportedQueue(ctx, vhosts, queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShovelForExportedQueue", reflect.TypeOf((*MockRabbitHelper)(nil).CreateShovelForExportedQueue), ctx, vhosts, queue)
}

// CreateVHost mocks base method.
func (m *MockRabbitHelper) CreateVHost(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVHost", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVHost indicates an expected call of CreateVHost.
func (mr *MockRabbitHelperMockRecorder) CreateVHost(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVHost", reflect.TypeOf((*MockRabbitHelper)(nil).CreateVHost), ctx)
}

// CreateVHostAndReturnStatus mocks base method.
func (m *MockRabbitHelper) CreateVHostAndReturnStatus(ctx context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVHostAndReturnStatus", ctx)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVHostAndReturnStatus indicates an expected call of CreateVHostAndReturnStatus.
func (mr *MockRabbitHelperMockRecorder) CreateVHostAndReturnStatus(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVHostAndReturnStatus", reflect.TypeOf((*MockRabbitHelper)(nil).CreateVHostAndReturnStatus), ctx)
}

// DeleteBinding mocks base method.
func (m *MockRabbitHelper) DeleteBinding(ctx context.Context, binding interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBinding", ctx, binding)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBinding indicates an expected call of DeleteBinding.
func (mr *MockRabbitHelperMockRecorder) DeleteBinding(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBinding", reflect.TypeOf((*MockRabbitHelper)(nil).DeleteBinding), ctx, binding)
}

// DeleteExchange mocks base method.
func (m *MockRabbitHelper) DeleteExchange(ctx context.Context, exchange interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExchange", ctx, exchange)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExchange indicates an expected call of DeleteExchange.
func (mr *MockRabbitHelperMockRecorder) DeleteExchange(ctx, exchange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExchange", reflect.TypeOf((*MockRabbitHelper)(nil).DeleteExchange), ctx, exchange)
}

// DeleteExchangeBinding mocks base method.
func (m *MockRabbitHelper) DeleteExchangeBinding(ctx context.Context, binding interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExchangeBinding", ctx, binding)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExchangeBinding indicates an expected call of DeleteExchangeBinding.
func (mr *MockRabbitHelperMockRecorder) DeleteExchangeBinding(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExchangeBinding", reflect.TypeOf((*MockRabbitHelper)(nil).DeleteExchangeBinding), ctx, binding)
}

// DeletePolicy mocks base method.
func (m *MockRabbitHelper) DeletePolicy(ctx context.Context, policy interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", ctx, policy)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockRabbitHelperMockRecorder) DeletePolicy(ctx, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockRabbitHelper)(nil).DeletePolicy), ctx, policy)
}

// DeleteQueue mocks base method.
func (m *MockRabbitHelper) DeleteQueue(ctx context.Context, queue interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQueue", ctx, queue)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteQueue indicates an expected call of DeleteQueue.
func (mr *MockRabbitHelperMockRecorder) DeleteQueue(ctx, queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueue", reflect.TypeOf((*MockRabbitHelper)(nil).DeleteQueue), ctx, queue)
}

// DeleteShovelsForExportedVhost mocks base method.
func (m *MockRabbitHelper) DeleteShovelsForExportedVhost(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteShovelsForExportedVhost", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteShovelsForExportedVhost indicates an expected call of DeleteShovelsForExportedVhost.
func (mr *MockRabbitHelperMockRecorder) DeleteShovelsForExportedVhost(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteShovelsForExportedVhost", reflect.TypeOf((*MockRabbitHelper)(nil).DeleteShovelsForExportedVhost), ctx)
}

// DeleteVHost mocks base method.
func (m *MockRabbitHelper) DeleteVHost(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVHost", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVHost indicates an expected call of DeleteVHost.
func (mr *MockRabbitHelperMockRecorder) DeleteVHost(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVHost", reflect.TypeOf((*MockRabbitHelper)(nil).DeleteVHost), ctx)
}

// FormatCnnUrl mocks base method.
func (m *MockRabbitHelper) FormatCnnUrl(vHost string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatCnnUrl", vHost)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatCnnUrl indicates an expected call of FormatCnnUrl.
func (mr *MockRabbitHelperMockRecorder) FormatCnnUrl(vHost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatCnnUrl", reflect.TypeOf((*MockRabbitHelper)(nil).FormatCnnUrl), vHost)
}

// GetAllEntities mocks base method.
func (m *MockRabbitHelper) GetAllEntities(ctx context.Context) (model.RabbitEntities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEntities", ctx)
	ret0, _ := ret[0].(model.RabbitEntities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEntities indicates an expected call of GetAllEntities.
func (mr *MockRabbitHelperMockRecorder) GetAllEntities(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEntities", reflect.TypeOf((*MockRabbitHelper)(nil).GetAllEntities), ctx)
}

// GetAllExchanges mocks base method.
func (m *MockRabbitHelper) GetAllExchanges(ctx context.Context) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllExchanges", ctx)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllExchanges indicates an expected call of GetAllExchanges.
func (mr *MockRabbitHelperMockRecorder) GetAllExchanges(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllExchanges", reflect.TypeOf((*MockRabbitHelper)(nil).GetAllExchanges), ctx)
}

// GetBinding mocks base method.
func (m *MockRabbitHelper) GetBinding(ctx context.Context, binding interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBinding", ctx, binding)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBinding indicates an expected call of GetBinding.
func (mr *MockRabbitHelperMockRecorder) GetBinding(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBinding", reflect.TypeOf((*MockRabbitHelper)(nil).GetBinding), ctx, binding)
}

// GetExchange mocks base method.
func (m *MockRabbitHelper) GetExchange(ctx context.Context, exchange interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchange", ctx, exchange)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchange indicates an expected call of GetExchange.
func (mr *MockRabbitHelperMockRecorder) GetExchange(ctx, exchange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchange", reflect.TypeOf((*MockRabbitHelper)(nil).GetExchange), ctx, exchange)
}

// GetExchangeBinding mocks base method.
func (m *MockRabbitHelper) GetExchangeBinding(ctx context.Context, binding interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeBinding", ctx, binding)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeBinding indicates an expected call of GetExchangeBinding.
func (mr *MockRabbitHelperMockRecorder) GetExchangeBinding(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeBinding", reflect.TypeOf((*MockRabbitHelper)(nil).GetExchangeBinding), ctx, binding)
}

// GetExchangeSourceBindings mocks base method.
func (m *MockRabbitHelper) GetExchangeSourceBindings(ctx context.Context, exchange interface{}) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeSourceBindings", ctx, exchange)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeSourceBindings indicates an expected call of GetExchangeSourceBindings.
func (mr *MockRabbitHelperMockRecorder) GetExchangeSourceBindings(ctx, exchange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeSourceBindings", reflect.TypeOf((*MockRabbitHelper)(nil).GetExchangeSourceBindings), ctx, exchange)
}

// GetExchangesStartsWithString mocks base method.
func (m *MockRabbitHelper) GetExchangesStartsWithString(ctx context.Context, prefix string) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangesStartsWithString", ctx, prefix)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangesStartsWithString indicates an expected call of GetExchangesStartsWithString.
func (mr *MockRabbitHelperMockRecorder) GetExchangesStartsWithString(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangesStartsWithString", reflect.TypeOf((*MockRabbitHelper)(nil).GetExchangesStartsWithString), ctx, prefix)
}

// GetPolicy mocks base method.
func (m *MockRabbitHelper) GetPolicy(ctx context.Context, policy interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", ctx, policy)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockRabbitHelperMockRecorder) GetPolicy(ctx, policy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockRabbitHelper)(nil).GetPolicy), ctx, policy)
}

// GetQueue mocks base method.
func (m *MockRabbitHelper) GetQueue(ctx context.Context, queue interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQueue", ctx, queue)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQueue indicates an expected call of GetQueue.
func (mr *MockRabbitHelperMockRecorder) GetQueue(ctx, queue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQueue", reflect.TypeOf((*MockRabbitHelper)(nil).GetQueue), ctx, queue)
}

// GetVhostExchanges mocks base method.
func (m *MockRabbitHelper) GetVhostExchanges(ctx context.Context) ([]model.Exchange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVhostExchanges", ctx)
	ret0, _ := ret[0].([]model.Exchange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVhostExchanges indicates an expected call of GetVhostExchanges.
func (mr *MockRabbitHelperMockRecorder) GetVhostExchanges(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVhostExchanges", reflect.TypeOf((*MockRabbitHelper)(nil).GetVhostExchanges), ctx)
}

// GetVhostQueues mocks base method.
func (m *MockRabbitHelper) GetVhostQueues(ctx context.Context) ([]model.Queue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVhostQueues", ctx)
	ret0, _ := ret[0].([]model.Queue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVhostQueues indicates an expected call of GetVhostQueues.
func (mr *MockRabbitHelperMockRecorder) GetVhostQueues(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVhostQueues", reflect.TypeOf((*MockRabbitHelper)(nil).GetVhostQueues), ctx)
}

// GetVhostShovels mocks base method.
func (m *MockRabbitHelper) GetVhostShovels(ctx context.Context) ([]model.Shovel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVhostShovels", ctx)
	ret0, _ := ret[0].([]model.Shovel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVhostShovels indicates an expected call of GetVhostShovels.
func (mr *MockRabbitHelperMockRecorder) GetVhostShovels(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVhostShovels", reflect.TypeOf((*MockRabbitHelper)(nil).GetVhostShovels), ctx)
}

// IsInstanceAvailable mocks base method.
func (m *MockRabbitHelper) IsInstanceAvailable() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInstanceAvailable")
	ret0, _ := ret[0].(error)
	return ret0
}

// IsInstanceAvailable indicates an expected call of IsInstanceAvailable.
func (mr *MockRabbitHelperMockRecorder) IsInstanceAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInstanceAvailable", reflect.TypeOf((*MockRabbitHelper)(nil).IsInstanceAvailable))
}
