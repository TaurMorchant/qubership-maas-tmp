// Code generated by MockGen. DO NOT EDIT.
// Source: rabbit_service.go

// Package mock_rabbit_service is a generated GoMock package.
package mock_rabbit_service

import (
	context "context"
	model "maas/maas-service/model"
	domain "maas/maas-service/service/bg2/domain"
	bg_service "maas/maas-service/service/bg_service"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRabbitService is a mock of RabbitService interface.
type MockRabbitService struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitServiceMockRecorder
}

// MockRabbitServiceMockRecorder is the mock recorder for MockRabbitService.
type MockRabbitServiceMockRecorder struct {
	mock *MockRabbitService
}

// NewMockRabbitService creates a new mock instance.
func NewMockRabbitService(ctrl *gomock.Controller) *MockRabbitService {
	mock := &MockRabbitService{ctrl: ctrl}
	mock.recorder = &MockRabbitServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitService) EXPECT() *MockRabbitServiceMockRecorder {
	return m.recorder
}

// ApplyBgStatus mocks base method.
func (m *MockRabbitService) ApplyBgStatus(ctx context.Context, bgStatusChange *bg_service.BgStatusChangeEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyBgStatus", ctx, bgStatusChange)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyBgStatus indicates an expected call of ApplyBgStatus.
func (mr *MockRabbitServiceMockRecorder) ApplyBgStatus(ctx, bgStatusChange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyBgStatus", reflect.TypeOf((*MockRabbitService)(nil).ApplyBgStatus), ctx, bgStatusChange)
}

// ApplyMsConfigAndVersionedEntitiesToDb mocks base method.
func (m *MockRabbitService) ApplyMsConfigAndVersionedEntitiesToDb(ctx context.Context, serviceName string, rabbitConfig *model.RabbitConfigReqDto, vhostId int, candidateVersion, namespace string) ([]model.RabbitVersionedEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyMsConfigAndVersionedEntitiesToDb", ctx, serviceName, rabbitConfig, vhostId, candidateVersion, namespace)
	ret0, _ := ret[0].([]model.RabbitVersionedEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyMsConfigAndVersionedEntitiesToDb indicates an expected call of ApplyMsConfigAndVersionedEntitiesToDb.
func (mr *MockRabbitServiceMockRecorder) ApplyMsConfigAndVersionedEntitiesToDb(ctx, serviceName, rabbitConfig, vhostId, candidateVersion, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyMsConfigAndVersionedEntitiesToDb", reflect.TypeOf((*MockRabbitService)(nil).ApplyMsConfigAndVersionedEntitiesToDb), ctx, serviceName, rabbitConfig, vhostId, candidateVersion, namespace)
}

// ApplyMssInActiveButNotInCandidateForVhost mocks base method.
func (m *MockRabbitService) ApplyMssInActiveButNotInCandidateForVhost(ctx context.Context, vhost model.VHostRegistration, activeVersion, candidateVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyMssInActiveButNotInCandidateForVhost", ctx, vhost, activeVersion, candidateVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyMssInActiveButNotInCandidateForVhost indicates an expected call of ApplyMssInActiveButNotInCandidateForVhost.
func (mr *MockRabbitServiceMockRecorder) ApplyMssInActiveButNotInCandidateForVhost(ctx, vhost, activeVersion, candidateVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyMssInActiveButNotInCandidateForVhost", reflect.TypeOf((*MockRabbitService)(nil).ApplyMssInActiveButNotInCandidateForVhost), ctx, vhost, activeVersion, candidateVersion)
}

// ApplyPolicies mocks base method.
func (m *MockRabbitService) ApplyPolicies(ctx context.Context, classifier model.Classifier, policies []interface{}) ([]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyPolicies", ctx, classifier, policies)
	ret0, _ := ret[0].([]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplyPolicies indicates an expected call of ApplyPolicies.
func (mr *MockRabbitServiceMockRecorder) ApplyPolicies(ctx, classifier, policies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyPolicies", reflect.TypeOf((*MockRabbitService)(nil).ApplyPolicies), ctx, classifier, policies)
}

// ChangeVersionRoutersActiveVersion mocks base method.
func (m *MockRabbitService) ChangeVersionRoutersActiveVersion(ctx context.Context, classifier model.Classifier, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeVersionRoutersActiveVersion", ctx, classifier, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeVersionRoutersActiveVersion indicates an expected call of ChangeVersionRoutersActiveVersion.
func (mr *MockRabbitServiceMockRecorder) ChangeVersionRoutersActiveVersion(ctx, classifier, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeVersionRoutersActiveVersion", reflect.TypeOf((*MockRabbitService)(nil).ChangeVersionRoutersActiveVersion), ctx, classifier, version)
}

// CleanupNamespace mocks base method.
func (m *MockRabbitService) CleanupNamespace(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupNamespace", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupNamespace indicates an expected call of CleanupNamespace.
func (mr *MockRabbitServiceMockRecorder) CleanupNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupNamespace", reflect.TypeOf((*MockRabbitService)(nil).CleanupNamespace), ctx, namespace)
}

// CloneVhost mocks base method.
func (m *MockRabbitService) CloneVhost(ctx context.Context, instanceId string, classifier *model.Classifier, version *model.Version) (bool, *model.VHostRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneVhost", ctx, instanceId, classifier, version)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.VHostRegistration)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CloneVhost indicates an expected call of CloneVhost.
func (mr *MockRabbitServiceMockRecorder) CloneVhost(ctx, instanceId, classifier, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneVhost", reflect.TypeOf((*MockRabbitService)(nil).CloneVhost), ctx, instanceId, classifier, version)
}

// Commit mocks base method.
func (m *MockRabbitService) Commit(ctx context.Context, state *domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockRabbitServiceMockRecorder) Commit(ctx, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockRabbitService)(nil).Commit), ctx, state)
}

// CreateAndRegisterVHost mocks base method.
func (m *MockRabbitService) CreateAndRegisterVHost(ctx context.Context, instance *model.RabbitInstance, classifier *model.Classifier, version *model.Version) (*model.VHostRegistrationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAndRegisterVHost", ctx, instance, classifier, version)
	ret0, _ := ret[0].(*model.VHostRegistrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAndRegisterVHost indicates an expected call of CreateAndRegisterVHost.
func (mr *MockRabbitServiceMockRecorder) CreateAndRegisterVHost(ctx, instance, classifier, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAndRegisterVHost", reflect.TypeOf((*MockRabbitService)(nil).CreateAndRegisterVHost), ctx, instance, classifier, version)
}

// CreateOrUpdateEntitiesV1 mocks base method.
func (m *MockRabbitService) CreateOrUpdateEntitiesV1(ctx context.Context, vHostRegistration *model.VHostRegistration, entities model.RabbitEntities) (*model.RabbitEntities, []model.UpdateStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateEntitiesV1", ctx, vHostRegistration, entities)
	ret0, _ := ret[0].(*model.RabbitEntities)
	ret1, _ := ret[1].([]model.UpdateStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateOrUpdateEntitiesV1 indicates an expected call of CreateOrUpdateEntitiesV1.
func (mr *MockRabbitServiceMockRecorder) CreateOrUpdateEntitiesV1(ctx, vHostRegistration, entities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateEntitiesV1", reflect.TypeOf((*MockRabbitService)(nil).CreateOrUpdateEntitiesV1), ctx, vHostRegistration, entities)
}

// CreateVersionedEntities mocks base method.
func (m *MockRabbitService) CreateVersionedEntities(ctx context.Context, namespace, candidateVersion string) (model.RabbitEntities, []model.UpdateStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVersionedEntities", ctx, namespace, candidateVersion)
	ret0, _ := ret[0].(model.RabbitEntities)
	ret1, _ := ret[1].([]model.UpdateStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateVersionedEntities indicates an expected call of CreateVersionedEntities.
func (mr *MockRabbitServiceMockRecorder) CreateVersionedEntities(ctx, namespace, candidateVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVersionedEntities", reflect.TypeOf((*MockRabbitService)(nil).CreateVersionedEntities), ctx, namespace, candidateVersion)
}

// DeleteEntities mocks base method.
func (m *MockRabbitService) DeleteEntities(ctx context.Context, classifier model.Classifier, entities model.RabbitDeletions) (*model.RabbitDeletions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntities", ctx, classifier, entities)
	ret0, _ := ret[0].(*model.RabbitDeletions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntities indicates an expected call of DeleteEntities.
func (mr *MockRabbitServiceMockRecorder) DeleteEntities(ctx, classifier, entities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntities", reflect.TypeOf((*MockRabbitService)(nil).DeleteEntities), ctx, classifier, entities)
}

// DeleteEntitiesByRabbitVersionedEntities mocks base method.
func (m *MockRabbitService) DeleteEntitiesByRabbitVersionedEntities(ctx context.Context, entities []model.RabbitVersionedEntity) (*model.RabbitEntities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntitiesByRabbitVersionedEntities", ctx, entities)
	ret0, _ := ret[0].(*model.RabbitEntities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntitiesByRabbitVersionedEntities indicates an expected call of DeleteEntitiesByRabbitVersionedEntities.
func (mr *MockRabbitServiceMockRecorder) DeleteEntitiesByRabbitVersionedEntities(ctx, entities interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntitiesByRabbitVersionedEntities", reflect.TypeOf((*MockRabbitService)(nil).DeleteEntitiesByRabbitVersionedEntities), ctx, entities)
}

// DestroyDomain mocks base method.
func (m *MockRabbitService) DestroyDomain(ctx context.Context, namespaces *domain.BGNamespaces) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyDomain", ctx, namespaces)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyDomain indicates an expected call of DestroyDomain.
func (mr *MockRabbitServiceMockRecorder) DestroyDomain(ctx, namespaces interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyDomain", reflect.TypeOf((*MockRabbitService)(nil).DestroyDomain), ctx, namespaces)
}

// FindVhostByClassifier mocks base method.
func (m *MockRabbitService) FindVhostByClassifier(ctx context.Context, classifier *model.Classifier) (*model.VHostRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVhostByClassifier", ctx, classifier)
	ret0, _ := ret[0].(*model.VHostRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVhostByClassifier indicates an expected call of FindVhostByClassifier.
func (mr *MockRabbitServiceMockRecorder) FindVhostByClassifier(ctx, classifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVhostByClassifier", reflect.TypeOf((*MockRabbitService)(nil).FindVhostByClassifier), ctx, classifier)
}

// FindVhostByClassifierForHelper mocks base method.
func (m *MockRabbitService) FindVhostByClassifierForHelper(ctx context.Context, classifier *model.Classifier) (*model.VHostRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVhostByClassifierForHelper", ctx, classifier)
	ret0, _ := ret[0].(*model.VHostRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVhostByClassifierForHelper indicates an expected call of FindVhostByClassifierForHelper.
func (mr *MockRabbitServiceMockRecorder) FindVhostByClassifierForHelper(ctx, classifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVhostByClassifierForHelper", reflect.TypeOf((*MockRabbitService)(nil).FindVhostByClassifierForHelper), ctx, classifier)
}

// FindVhostWithSearchForm mocks base method.
func (m *MockRabbitService) FindVhostWithSearchForm(ctx context.Context, searchForm *model.SearchForm) ([]model.VHostRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVhostWithSearchForm", ctx, searchForm)
	ret0, _ := ret[0].([]model.VHostRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVhostWithSearchForm indicates an expected call of FindVhostWithSearchForm.
func (mr *MockRabbitServiceMockRecorder) FindVhostWithSearchForm(ctx, searchForm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVhostWithSearchForm", reflect.TypeOf((*MockRabbitService)(nil).FindVhostWithSearchForm), ctx, searchForm)
}

// FindVhostsByNamespace mocks base method.
func (m *MockRabbitService) FindVhostsByNamespace(ctx context.Context, namespace string) ([]model.VHostRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVhostsByNamespace", ctx, namespace)
	ret0, _ := ret[0].([]model.VHostRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVhostsByNamespace indicates an expected call of FindVhostsByNamespace.
func (mr *MockRabbitServiceMockRecorder) FindVhostsByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVhostsByNamespace", reflect.TypeOf((*MockRabbitService)(nil).FindVhostsByNamespace), ctx, namespace)
}

// GetApiUrl mocks base method.
func (m *MockRabbitService) GetApiUrl(ctx context.Context, instanceId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiUrl", ctx, instanceId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiUrl indicates an expected call of GetApiUrl.
func (mr *MockRabbitServiceMockRecorder) GetApiUrl(ctx, instanceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiUrl", reflect.TypeOf((*MockRabbitService)(nil).GetApiUrl), ctx, instanceId)
}

// GetConfig mocks base method.
func (m *MockRabbitService) GetConfig(ctx context.Context, classifier model.Classifier) (*model.RabbitEntities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig", ctx, classifier)
	ret0, _ := ret[0].(*model.RabbitEntities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockRabbitServiceMockRecorder) GetConfig(ctx, classifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockRabbitService)(nil).GetConfig), ctx, classifier)
}

// GetConnectionUrl mocks base method.
func (m *MockRabbitService) GetConnectionUrl(ctx context.Context, vhost *model.VHostRegistration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionUrl", ctx, vhost)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionUrl indicates an expected call of GetConnectionUrl.
func (mr *MockRabbitServiceMockRecorder) GetConnectionUrl(ctx, vhost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionUrl", reflect.TypeOf((*MockRabbitService)(nil).GetConnectionUrl), ctx, vhost)
}

// GetLazyBindings mocks base method.
func (m *MockRabbitService) GetLazyBindings(ctx context.Context, namespace string) ([]model.LazyBindingDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLazyBindings", ctx, namespace)
	ret0, _ := ret[0].([]model.LazyBindingDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLazyBindings indicates an expected call of GetLazyBindings.
func (mr *MockRabbitServiceMockRecorder) GetLazyBindings(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLazyBindings", reflect.TypeOf((*MockRabbitService)(nil).GetLazyBindings), ctx, namespace)
}

// GetOrCreateVhost mocks base method.
func (m *MockRabbitService) GetOrCreateVhost(ctx context.Context, instanceId string, classifier *model.Classifier, version *model.Version) (bool, *model.VHostRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateVhost", ctx, instanceId, classifier, version)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model.VHostRegistration)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOrCreateVhost indicates an expected call of GetOrCreateVhost.
func (mr *MockRabbitServiceMockRecorder) GetOrCreateVhost(ctx, instanceId, classifier, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateVhost", reflect.TypeOf((*MockRabbitService)(nil).GetOrCreateVhost), ctx, instanceId, classifier, version)
}

// GetShovels mocks base method.
func (m *MockRabbitService) GetShovels(ctx context.Context, classifier model.Classifier) ([]model.Shovel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShovels", ctx, classifier)
	ret0, _ := ret[0].([]model.Shovel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShovels indicates an expected call of GetShovels.
func (mr *MockRabbitServiceMockRecorder) GetShovels(ctx, classifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShovels", reflect.TypeOf((*MockRabbitService)(nil).GetShovels), ctx, classifier)
}

// LoadRabbitInstance mocks base method.
func (m *MockRabbitService) LoadRabbitInstance(ctx context.Context, vhost *model.VHostRegistration) (*model.RabbitInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadRabbitInstance", ctx, vhost)
	ret0, _ := ret[0].(*model.RabbitInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadRabbitInstance indicates an expected call of LoadRabbitInstance.
func (mr *MockRabbitServiceMockRecorder) LoadRabbitInstance(ctx, vhost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadRabbitInstance", reflect.TypeOf((*MockRabbitService)(nil).LoadRabbitInstance), ctx, vhost)
}

// ProcessExportedVhost mocks base method.
func (m *MockRabbitService) ProcessExportedVhost(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessExportedVhost", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessExportedVhost indicates an expected call of ProcessExportedVhost.
func (mr *MockRabbitServiceMockRecorder) ProcessExportedVhost(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessExportedVhost", reflect.TypeOf((*MockRabbitService)(nil).ProcessExportedVhost), ctx, namespace)
}

// Promote mocks base method.
func (m *MockRabbitService) Promote(ctx context.Context, state *domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Promote", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Promote indicates an expected call of Promote.
func (mr *MockRabbitServiceMockRecorder) Promote(ctx, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Promote", reflect.TypeOf((*MockRabbitService)(nil).Promote), ctx, state)
}

// RabbitBgValidation mocks base method.
func (m *MockRabbitService) RabbitBgValidation(ctx context.Context, namespace, candidateVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RabbitBgValidation", ctx, namespace, candidateVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// RabbitBgValidation indicates an expected call of RabbitBgValidation.
func (mr *MockRabbitServiceMockRecorder) RabbitBgValidation(ctx, namespace, candidateVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RabbitBgValidation", reflect.TypeOf((*MockRabbitService)(nil).RabbitBgValidation), ctx, namespace, candidateVersion)
}

// RecoverVhostsByNamespace mocks base method.
func (m *MockRabbitService) RecoverVhostsByNamespace(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverVhostsByNamespace", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecoverVhostsByNamespace indicates an expected call of RecoverVhostsByNamespace.
func (mr *MockRabbitServiceMockRecorder) RecoverVhostsByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverVhostsByNamespace", reflect.TypeOf((*MockRabbitService)(nil).RecoverVhostsByNamespace), ctx, namespace)
}

// RemoveVHosts mocks base method.
func (m *MockRabbitService) RemoveVHosts(ctx context.Context, searchForm *model.SearchForm, defaultNamespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVHosts", ctx, searchForm, defaultNamespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVHosts indicates an expected call of RemoveVHosts.
func (mr *MockRabbitServiceMockRecorder) RemoveVHosts(ctx, searchForm, defaultNamespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVHosts", reflect.TypeOf((*MockRabbitService)(nil).RemoveVHosts), ctx, searchForm, defaultNamespace)
}

// Rollback mocks base method.
func (m *MockRabbitService) Rollback(ctx context.Context, state *domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockRabbitServiceMockRecorder) Rollback(ctx, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockRabbitService)(nil).Rollback), ctx, state)
}

// RotatePasswords mocks base method.
func (m *MockRabbitService) RotatePasswords(ctx context.Context, searchForm *model.SearchForm) ([]model.VHostRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotatePasswords", ctx, searchForm)
	ret0, _ := ret[0].([]model.VHostRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RotatePasswords indicates an expected call of RotatePasswords.
func (mr *MockRabbitServiceMockRecorder) RotatePasswords(ctx, searchForm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotatePasswords", reflect.TypeOf((*MockRabbitService)(nil).RotatePasswords), ctx, searchForm)
}

// Warmup mocks base method.
func (m *MockRabbitService) Warmup(ctx context.Context, state *domain.BGState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Warmup", ctx, state)
	ret0, _ := ret[0].(error)
	return ret0
}

// Warmup indicates an expected call of Warmup.
func (mr *MockRabbitServiceMockRecorder) Warmup(ctx, state interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warmup", reflect.TypeOf((*MockRabbitService)(nil).Warmup), ctx, state)
}

// MockKeyManager is a mock of KeyManager interface.
type MockKeyManager struct {
	ctrl     *gomock.Controller
	recorder *MockKeyManagerMockRecorder
}

// MockKeyManagerMockRecorder is the mock recorder for MockKeyManager.
type MockKeyManagerMockRecorder struct {
	mock *MockKeyManager
}

// NewMockKeyManager creates a new mock instance.
func NewMockKeyManager(ctrl *gomock.Controller) *MockKeyManager {
	mock := &MockKeyManager{ctrl: ctrl}
	mock.recorder = &MockKeyManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyManager) EXPECT() *MockKeyManagerMockRecorder {
	return m.recorder
}

// DeletePassword mocks base method.
func (m *MockKeyManager) DeletePassword(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePassword", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePassword indicates an expected call of DeletePassword.
func (mr *MockKeyManagerMockRecorder) DeletePassword(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePassword", reflect.TypeOf((*MockKeyManager)(nil).DeletePassword), ctx, key)
}

// SecurePassword mocks base method.
func (m *MockKeyManager) SecurePassword(ctx context.Context, namespace, password, client string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecurePassword", ctx, namespace, password, client)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SecurePassword indicates an expected call of SecurePassword.
func (mr *MockKeyManagerMockRecorder) SecurePassword(ctx, namespace, password, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecurePassword", reflect.TypeOf((*MockKeyManager)(nil).SecurePassword), ctx, namespace, password, client)
}
