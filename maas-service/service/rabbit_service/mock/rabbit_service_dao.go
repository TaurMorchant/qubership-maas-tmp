// Code generated by MockGen. DO NOT EDIT.
// Source: rabbit_service_dao.go

// Package mock_rabbit_service is a generated GoMock package.
package mock_rabbit_service

import (
	context "context"
	model "maas/maas-service/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRabbitServiceDao is a mock of RabbitServiceDao interface.
type MockRabbitServiceDao struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitServiceDaoMockRecorder
}

// MockRabbitServiceDaoMockRecorder is the mock recorder for MockRabbitServiceDao.
type MockRabbitServiceDaoMockRecorder struct {
	mock *MockRabbitServiceDao
}

// NewMockRabbitServiceDao creates a new mock instance.
func NewMockRabbitServiceDao(ctrl *gomock.Controller) *MockRabbitServiceDao {
	mock := &MockRabbitServiceDao{ctrl: ctrl}
	mock.recorder = &MockRabbitServiceDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitServiceDao) EXPECT() *MockRabbitServiceDaoMockRecorder {
	return m.recorder
}

// CheckBindingDeclaredInSameMsAsQ mocks base method.
func (m *MockRabbitServiceDao) CheckBindingDeclaredInSameMsAsQ(ctx context.Context, vhostId int, candidateVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBindingDeclaredInSameMsAsQ", ctx, vhostId, candidateVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckBindingDeclaredInSameMsAsQ indicates an expected call of CheckBindingDeclaredInSameMsAsQ.
func (mr *MockRabbitServiceDaoMockRecorder) CheckBindingDeclaredInSameMsAsQ(ctx, vhostId, candidateVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBindingDeclaredInSameMsAsQ", reflect.TypeOf((*MockRabbitServiceDao)(nil).CheckBindingDeclaredInSameMsAsQ), ctx, vhostId, candidateVersion)
}

// CheckBindingsHaveExistingESource mocks base method.
func (m *MockRabbitServiceDao) CheckBindingsHaveExistingESource(ctx context.Context, vhostId int, candidateVersion string) ([]model.RabbitVersionedEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBindingsHaveExistingESource", ctx, vhostId, candidateVersion)
	ret0, _ := ret[0].([]model.RabbitVersionedEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBindingsHaveExistingESource indicates an expected call of CheckBindingsHaveExistingESource.
func (mr *MockRabbitServiceDaoMockRecorder) CheckBindingsHaveExistingESource(ctx, vhostId, candidateVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBindingsHaveExistingESource", reflect.TypeOf((*MockRabbitServiceDao)(nil).CheckBindingsHaveExistingESource), ctx, vhostId, candidateVersion)
}

// CheckBindingsHaveExistingQDestination mocks base method.
func (m *MockRabbitServiceDao) CheckBindingsHaveExistingQDestination(ctx context.Context, vhostId int, candidateVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBindingsHaveExistingQDestination", ctx, vhostId, candidateVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckBindingsHaveExistingQDestination indicates an expected call of CheckBindingsHaveExistingQDestination.
func (mr *MockRabbitServiceDaoMockRecorder) CheckBindingsHaveExistingQDestination(ctx, vhostId, candidateVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBindingsHaveExistingQDestination", reflect.TypeOf((*MockRabbitServiceDao)(nil).CheckBindingsHaveExistingQDestination), ctx, vhostId, candidateVersion)
}

// CheckExchangesAndQueuesHaveUniqueName mocks base method.
func (m *MockRabbitServiceDao) CheckExchangesAndQueuesHaveUniqueName(ctx context.Context, vhostId int, candidateVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExchangesAndQueuesHaveUniqueName", ctx, vhostId, candidateVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckExchangesAndQueuesHaveUniqueName indicates an expected call of CheckExchangesAndQueuesHaveUniqueName.
func (mr *MockRabbitServiceDaoMockRecorder) CheckExchangesAndQueuesHaveUniqueName(ctx, vhostId, candidateVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExchangesAndQueuesHaveUniqueName", reflect.TypeOf((*MockRabbitServiceDao)(nil).CheckExchangesAndQueuesHaveUniqueName), ctx, vhostId, candidateVersion)
}

// CheckNoQueuesWithoutBinding mocks base method.
func (m *MockRabbitServiceDao) CheckNoQueuesWithoutBinding(ctx context.Context, vhostId int, candidateVersion string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNoQueuesWithoutBinding", ctx, vhostId, candidateVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckNoQueuesWithoutBinding indicates an expected call of CheckNoQueuesWithoutBinding.
func (mr *MockRabbitServiceDaoMockRecorder) CheckNoQueuesWithoutBinding(ctx, vhostId, candidateVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNoQueuesWithoutBinding", reflect.TypeOf((*MockRabbitServiceDao)(nil).CheckNoQueuesWithoutBinding), ctx, vhostId, candidateVersion)
}

// DeleteAllVersEntitiesByMsConfigId mocks base method.
func (m *MockRabbitServiceDao) DeleteAllVersEntitiesByMsConfigId(ctx context.Context, msConfigId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllVersEntitiesByMsConfigId", ctx, msConfigId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllVersEntitiesByMsConfigId indicates an expected call of DeleteAllVersEntitiesByMsConfigId.
func (mr *MockRabbitServiceDaoMockRecorder) DeleteAllVersEntitiesByMsConfigId(ctx, msConfigId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllVersEntitiesByMsConfigId", reflect.TypeOf((*MockRabbitServiceDao)(nil).DeleteAllVersEntitiesByMsConfigId), ctx, msConfigId)
}

// DeleteLazyBindingBySourceAndDestinationAndClassifier mocks base method.
func (m *MockRabbitServiceDao) DeleteLazyBindingBySourceAndDestinationAndClassifier(ctx context.Context, classifier string, entity interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLazyBindingBySourceAndDestinationAndClassifier", ctx, classifier, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLazyBindingBySourceAndDestinationAndClassifier indicates an expected call of DeleteLazyBindingBySourceAndDestinationAndClassifier.
func (mr *MockRabbitServiceDaoMockRecorder) DeleteLazyBindingBySourceAndDestinationAndClassifier(ctx, classifier, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLazyBindingBySourceAndDestinationAndClassifier", reflect.TypeOf((*MockRabbitServiceDao)(nil).DeleteLazyBindingBySourceAndDestinationAndClassifier), ctx, classifier, entity)
}

// DeleteMsConfig mocks base method.
func (m *MockRabbitServiceDao) DeleteMsConfig(ctx context.Context, msConfig model.MsConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMsConfig", ctx, msConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMsConfig indicates an expected call of DeleteMsConfig.
func (mr *MockRabbitServiceDaoMockRecorder) DeleteMsConfig(ctx, msConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMsConfig", reflect.TypeOf((*MockRabbitServiceDao)(nil).DeleteMsConfig), ctx, msConfig)
}

// DeleteMsConfigsByNamespace mocks base method.
func (m *MockRabbitServiceDao) DeleteMsConfigsByNamespace(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMsConfigsByNamespace", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMsConfigsByNamespace indicates an expected call of DeleteMsConfigsByNamespace.
func (mr *MockRabbitServiceDaoMockRecorder) DeleteMsConfigsByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMsConfigsByNamespace", reflect.TypeOf((*MockRabbitServiceDao)(nil).DeleteMsConfigsByNamespace), ctx, namespace)
}

// DeleteNamedRabbitEntity mocks base method.
func (m *MockRabbitServiceDao) DeleteNamedRabbitEntity(ctx context.Context, entity *model.RabbitEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNamedRabbitEntity", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNamedRabbitEntity indicates an expected call of DeleteNamedRabbitEntity.
func (mr *MockRabbitServiceDaoMockRecorder) DeleteNamedRabbitEntity(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNamedRabbitEntity", reflect.TypeOf((*MockRabbitServiceDao)(nil).DeleteNamedRabbitEntity), ctx, entity)
}

// DeleteRabbitVersEntityFromDB mocks base method.
func (m *MockRabbitServiceDao) DeleteRabbitVersEntityFromDB(ctx context.Context, entity *model.RabbitVersionedEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRabbitVersEntityFromDB", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRabbitVersEntityFromDB indicates an expected call of DeleteRabbitVersEntityFromDB.
func (mr *MockRabbitServiceDaoMockRecorder) DeleteRabbitVersEntityFromDB(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRabbitVersEntityFromDB", reflect.TypeOf((*MockRabbitServiceDao)(nil).DeleteRabbitVersEntityFromDB), ctx, entity)
}

// DeleteVhostRegistration mocks base method.
func (m *MockRabbitServiceDao) DeleteVhostRegistration(ctx context.Context, registration *model.VHostRegistration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVhostRegistration", ctx, registration)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVhostRegistration indicates an expected call of DeleteVhostRegistration.
func (mr *MockRabbitServiceDaoMockRecorder) DeleteVhostRegistration(ctx, registration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVhostRegistration", reflect.TypeOf((*MockRabbitServiceDao)(nil).DeleteVhostRegistration), ctx, registration)
}

// FindVhostByClassifier mocks base method.
func (m *MockRabbitServiceDao) FindVhostByClassifier(ctx context.Context, classifier model.Classifier) (*model.VHostRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVhostByClassifier", ctx, classifier)
	ret0, _ := ret[0].(*model.VHostRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVhostByClassifier indicates an expected call of FindVhostByClassifier.
func (mr *MockRabbitServiceDaoMockRecorder) FindVhostByClassifier(ctx, classifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVhostByClassifier", reflect.TypeOf((*MockRabbitServiceDao)(nil).FindVhostByClassifier), ctx, classifier)
}

// FindVhostWithSearchForm mocks base method.
func (m *MockRabbitServiceDao) FindVhostWithSearchForm(ctx context.Context, search *model.SearchForm) ([]model.VHostRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVhostWithSearchForm", ctx, search)
	ret0, _ := ret[0].([]model.VHostRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVhostWithSearchForm indicates an expected call of FindVhostWithSearchForm.
func (mr *MockRabbitServiceDaoMockRecorder) FindVhostWithSearchForm(ctx, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVhostWithSearchForm", reflect.TypeOf((*MockRabbitServiceDao)(nil).FindVhostWithSearchForm), ctx, search)
}

// FindVhostsByNamespace mocks base method.
func (m *MockRabbitServiceDao) FindVhostsByNamespace(ctx context.Context, namespace string) ([]model.VHostRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVhostsByNamespace", ctx, namespace)
	ret0, _ := ret[0].([]model.VHostRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVhostsByNamespace indicates an expected call of FindVhostsByNamespace.
func (mr *MockRabbitServiceDaoMockRecorder) FindVhostsByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVhostsByNamespace", reflect.TypeOf((*MockRabbitServiceDao)(nil).FindVhostsByNamespace), ctx, namespace)
}

// GetMsConfigByVhostAndMsNameAndCandidateVersion mocks base method.
func (m *MockRabbitServiceDao) GetMsConfigByVhostAndMsNameAndCandidateVersion(ctx context.Context, vhostId int, msName, version string) (*model.MsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMsConfigByVhostAndMsNameAndCandidateVersion", ctx, vhostId, msName, version)
	ret0, _ := ret[0].(*model.MsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMsConfigByVhostAndMsNameAndCandidateVersion indicates an expected call of GetMsConfigByVhostAndMsNameAndCandidateVersion.
func (mr *MockRabbitServiceDaoMockRecorder) GetMsConfigByVhostAndMsNameAndCandidateVersion(ctx, vhostId, msName, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsConfigByVhostAndMsNameAndCandidateVersion", reflect.TypeOf((*MockRabbitServiceDao)(nil).GetMsConfigByVhostAndMsNameAndCandidateVersion), ctx, vhostId, msName, version)
}

// GetMsConfigsByBgDomainAndCandidateVersion mocks base method.
func (m *MockRabbitServiceDao) GetMsConfigsByBgDomainAndCandidateVersion(ctx context.Context, namespace, version string) ([]model.MsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMsConfigsByBgDomainAndCandidateVersion", ctx, namespace, version)
	ret0, _ := ret[0].([]model.MsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMsConfigsByBgDomainAndCandidateVersion indicates an expected call of GetMsConfigsByBgDomainAndCandidateVersion.
func (mr *MockRabbitServiceDaoMockRecorder) GetMsConfigsByBgDomainAndCandidateVersion(ctx, namespace, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsConfigsByBgDomainAndCandidateVersion", reflect.TypeOf((*MockRabbitServiceDao)(nil).GetMsConfigsByBgDomainAndCandidateVersion), ctx, namespace, version)
}

// GetMsConfigsByNamespace mocks base method.
func (m *MockRabbitServiceDao) GetMsConfigsByNamespace(ctx context.Context, namespace string) ([]model.MsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMsConfigsByNamespace", ctx, namespace)
	ret0, _ := ret[0].([]model.MsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMsConfigsByNamespace indicates an expected call of GetMsConfigsByNamespace.
func (mr *MockRabbitServiceDaoMockRecorder) GetMsConfigsByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsConfigsByNamespace", reflect.TypeOf((*MockRabbitServiceDao)(nil).GetMsConfigsByNamespace), ctx, namespace)
}

// GetMsConfigsInActiveButNotInCandidateByVhost mocks base method.
func (m *MockRabbitServiceDao) GetMsConfigsInActiveButNotInCandidateByVhost(ctx context.Context, vhostId int, activeVersion, candidateVersion string) ([]model.MsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMsConfigsInActiveButNotInCandidateByVhost", ctx, vhostId, activeVersion, candidateVersion)
	ret0, _ := ret[0].([]model.MsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMsConfigsInActiveButNotInCandidateByVhost indicates an expected call of GetMsConfigsInActiveButNotInCandidateByVhost.
func (mr *MockRabbitServiceDaoMockRecorder) GetMsConfigsInActiveButNotInCandidateByVhost(ctx, vhostId, activeVersion, candidateVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMsConfigsInActiveButNotInCandidateByVhost", reflect.TypeOf((*MockRabbitServiceDao)(nil).GetMsConfigsInActiveButNotInCandidateByVhost), ctx, vhostId, activeVersion, candidateVersion)
}

// GetNotCreatedLazyBindingsByClassifier mocks base method.
func (m *MockRabbitServiceDao) GetNotCreatedLazyBindingsByClassifier(ctx context.Context, classifier string) ([]model.RabbitEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotCreatedLazyBindingsByClassifier", ctx, classifier)
	ret0, _ := ret[0].([]model.RabbitEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotCreatedLazyBindingsByClassifier indicates an expected call of GetNotCreatedLazyBindingsByClassifier.
func (mr *MockRabbitServiceDaoMockRecorder) GetNotCreatedLazyBindingsByClassifier(ctx, classifier interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotCreatedLazyBindingsByClassifier", reflect.TypeOf((*MockRabbitServiceDao)(nil).GetNotCreatedLazyBindingsByClassifier), ctx, classifier)
}

// GetRabbitEntitiesByVhostId mocks base method.
func (m *MockRabbitServiceDao) GetRabbitEntitiesByVhostId(ctx context.Context, vhostId int) ([]model.RabbitEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRabbitEntitiesByVhostId", ctx, vhostId)
	ret0, _ := ret[0].([]model.RabbitEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRabbitEntitiesByVhostId indicates an expected call of GetRabbitEntitiesByVhostId.
func (mr *MockRabbitServiceDaoMockRecorder) GetRabbitEntitiesByVhostId(ctx, vhostId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRabbitEntitiesByVhostId", reflect.TypeOf((*MockRabbitServiceDao)(nil).GetRabbitEntitiesByVhostId), ctx, vhostId)
}

// GetRabbitLazyBindings mocks base method.
func (m *MockRabbitServiceDao) GetRabbitLazyBindings(ctx context.Context, namespace string) ([]model.LazyBindingDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRabbitLazyBindings", ctx, namespace)
	ret0, _ := ret[0].([]model.LazyBindingDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRabbitLazyBindings indicates an expected call of GetRabbitLazyBindings.
func (mr *MockRabbitServiceDaoMockRecorder) GetRabbitLazyBindings(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRabbitLazyBindings", reflect.TypeOf((*MockRabbitServiceDao)(nil).GetRabbitLazyBindings), ctx, namespace)
}

// GetRabbitVersEntitiesByMsConfigIdAndType mocks base method.
func (m *MockRabbitServiceDao) GetRabbitVersEntitiesByMsConfigIdAndType(ctx context.Context, msConfigId int, entType model.RabbitEntityType) ([]model.RabbitVersionedEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRabbitVersEntitiesByMsConfigIdAndType", ctx, msConfigId, entType)
	ret0, _ := ret[0].([]model.RabbitVersionedEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRabbitVersEntitiesByMsConfigIdAndType indicates an expected call of GetRabbitVersEntitiesByMsConfigIdAndType.
func (mr *MockRabbitServiceDaoMockRecorder) GetRabbitVersEntitiesByMsConfigIdAndType(ctx, msConfigId, entType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRabbitVersEntitiesByMsConfigIdAndType", reflect.TypeOf((*MockRabbitServiceDao)(nil).GetRabbitVersEntitiesByMsConfigIdAndType), ctx, msConfigId, entType)
}

// GetRabbitVersEntitiesByVhost mocks base method.
func (m *MockRabbitServiceDao) GetRabbitVersEntitiesByVhost(ctx context.Context, vhostId int) ([]model.RabbitVersionedEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRabbitVersEntitiesByVhost", ctx, vhostId)
	ret0, _ := ret[0].([]model.RabbitVersionedEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRabbitVersEntitiesByVhost indicates an expected call of GetRabbitVersEntitiesByVhost.
func (mr *MockRabbitServiceDaoMockRecorder) GetRabbitVersEntitiesByVhost(ctx, vhostId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRabbitVersEntitiesByVhost", reflect.TypeOf((*MockRabbitServiceDao)(nil).GetRabbitVersEntitiesByVhost), ctx, vhostId)
}

// GetRabbitVersEntitiesByVhostAndNameAndType mocks base method.
func (m *MockRabbitServiceDao) GetRabbitVersEntitiesByVhostAndNameAndType(ctx context.Context, vhostId int, name, entType string) ([]model.RabbitVersionedEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRabbitVersEntitiesByVhostAndNameAndType", ctx, vhostId, name, entType)
	ret0, _ := ret[0].([]model.RabbitVersionedEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRabbitVersEntitiesByVhostAndNameAndType indicates an expected call of GetRabbitVersEntitiesByVhostAndNameAndType.
func (mr *MockRabbitServiceDaoMockRecorder) GetRabbitVersEntitiesByVhostAndNameAndType(ctx, vhostId, name, entType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRabbitVersEntitiesByVhostAndNameAndType", reflect.TypeOf((*MockRabbitServiceDao)(nil).GetRabbitVersEntitiesByVhostAndNameAndType), ctx, vhostId, name, entType)
}

// GetRabbitVersEntitiesByVhostAndNameAndTypeAndActualVersion mocks base method.
func (m *MockRabbitServiceDao) GetRabbitVersEntitiesByVhostAndNameAndTypeAndActualVersion(ctx context.Context, vhostId int, name, entType, actVersion string) ([]model.RabbitVersionedEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRabbitVersEntitiesByVhostAndNameAndTypeAndActualVersion", ctx, vhostId, name, entType, actVersion)
	ret0, _ := ret[0].([]model.RabbitVersionedEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRabbitVersEntitiesByVhostAndNameAndTypeAndActualVersion indicates an expected call of GetRabbitVersEntitiesByVhostAndNameAndTypeAndActualVersion.
func (mr *MockRabbitServiceDaoMockRecorder) GetRabbitVersEntitiesByVhostAndNameAndTypeAndActualVersion(ctx, vhostId, name, entType, actVersion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRabbitVersEntitiesByVhostAndNameAndTypeAndActualVersion", reflect.TypeOf((*MockRabbitServiceDao)(nil).GetRabbitVersEntitiesByVhostAndNameAndTypeAndActualVersion), ctx, vhostId, name, entType, actVersion)
}

// InsertLazyBinding mocks base method.
func (m *MockRabbitServiceDao) InsertLazyBinding(ctx context.Context, binding *model.RabbitEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertLazyBinding", ctx, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertLazyBinding indicates an expected call of InsertLazyBinding.
func (mr *MockRabbitServiceDaoMockRecorder) InsertLazyBinding(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertLazyBinding", reflect.TypeOf((*MockRabbitServiceDao)(nil).InsertLazyBinding), ctx, binding)
}

// InsertRabbitMsConfig mocks base method.
func (m *MockRabbitServiceDao) InsertRabbitMsConfig(ctx context.Context, msConfig *model.MsConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRabbitMsConfig", ctx, msConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRabbitMsConfig indicates an expected call of InsertRabbitMsConfig.
func (mr *MockRabbitServiceDaoMockRecorder) InsertRabbitMsConfig(ctx, msConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRabbitMsConfig", reflect.TypeOf((*MockRabbitServiceDao)(nil).InsertRabbitMsConfig), ctx, msConfig)
}

// InsertRabbitVersionedEntity mocks base method.
func (m *MockRabbitServiceDao) InsertRabbitVersionedEntity(ctx context.Context, entity *model.RabbitVersionedEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRabbitVersionedEntity", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRabbitVersionedEntity indicates an expected call of InsertRabbitVersionedEntity.
func (mr *MockRabbitServiceDaoMockRecorder) InsertRabbitVersionedEntity(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRabbitVersionedEntity", reflect.TypeOf((*MockRabbitServiceDao)(nil).InsertRabbitVersionedEntity), ctx, entity)
}

// InsertVhostRegistration mocks base method.
func (m *MockRabbitServiceDao) InsertVhostRegistration(ctx context.Context, reg *model.VHostRegistration, ext func(*model.VHostRegistration) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertVhostRegistration", ctx, reg, ext)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertVhostRegistration indicates an expected call of InsertVhostRegistration.
func (mr *MockRabbitServiceDaoMockRecorder) InsertVhostRegistration(ctx, reg, ext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertVhostRegistration", reflect.TypeOf((*MockRabbitServiceDao)(nil).InsertVhostRegistration), ctx, reg, ext)
}

// UpdateLazyBinding mocks base method.
func (m *MockRabbitServiceDao) UpdateLazyBinding(ctx context.Context, binding *model.RabbitEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLazyBinding", ctx, binding)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLazyBinding indicates an expected call of UpdateLazyBinding.
func (mr *MockRabbitServiceDaoMockRecorder) UpdateLazyBinding(ctx, binding interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLazyBinding", reflect.TypeOf((*MockRabbitServiceDao)(nil).UpdateLazyBinding), ctx, binding)
}

// UpdateMsConfigActualVersion mocks base method.
func (m *MockRabbitServiceDao) UpdateMsConfigActualVersion(ctx context.Context, msConfig model.MsConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMsConfigActualVersion", ctx, msConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMsConfigActualVersion indicates an expected call of UpdateMsConfigActualVersion.
func (mr *MockRabbitServiceDaoMockRecorder) UpdateMsConfigActualVersion(ctx, msConfig interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMsConfigActualVersion", reflect.TypeOf((*MockRabbitServiceDao)(nil).UpdateMsConfigActualVersion), ctx, msConfig)
}

// UpdateRabbitVersionedEntity mocks base method.
func (m *MockRabbitServiceDao) UpdateRabbitVersionedEntity(ctx context.Context, ent model.RabbitVersionedEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRabbitVersionedEntity", ctx, ent)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRabbitVersionedEntity indicates an expected call of UpdateRabbitVersionedEntity.
func (mr *MockRabbitServiceDaoMockRecorder) UpdateRabbitVersionedEntity(ctx, ent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRabbitVersionedEntity", reflect.TypeOf((*MockRabbitServiceDao)(nil).UpdateRabbitVersionedEntity), ctx, ent)
}

// UpdateVhostRegistration mocks base method.
func (m *MockRabbitServiceDao) UpdateVhostRegistration(ctx context.Context, reg *model.VHostRegistration, ext func(*model.VHostRegistration) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVhostRegistration", ctx, reg, ext)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVhostRegistration indicates an expected call of UpdateVhostRegistration.
func (mr *MockRabbitServiceDaoMockRecorder) UpdateVhostRegistration(ctx, reg, ext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVhostRegistration", reflect.TypeOf((*MockRabbitServiceDao)(nil).UpdateVhostRegistration), ctx, reg, ext)
}

// UpsertNamedRabbitEntity mocks base method.
func (m *MockRabbitServiceDao) UpsertNamedRabbitEntity(ctx context.Context, entity *model.RabbitEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertNamedRabbitEntity", ctx, entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertNamedRabbitEntity indicates an expected call of UpsertNamedRabbitEntity.
func (mr *MockRabbitServiceDaoMockRecorder) UpsertNamedRabbitEntity(ctx, entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertNamedRabbitEntity", reflect.TypeOf((*MockRabbitServiceDao)(nil).UpsertNamedRabbitEntity), ctx, entity)
}

// WithLock mocks base method.
func (m *MockRabbitServiceDao) WithLock(ctx context.Context, lockId string, f func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLock", ctx, lockId, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithLock indicates an expected call of WithLock.
func (mr *MockRabbitServiceDaoMockRecorder) WithLock(ctx, lockId, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLock", reflect.TypeOf((*MockRabbitServiceDao)(nil).WithLock), ctx, lockId, f)
}
