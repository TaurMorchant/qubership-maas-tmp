// Code generated by MockGen. DO NOT EDIT.
// Source: tenant_service.go

// Package mock_tenant is a generated GoMock package.
package mock_tenant

import (
	context "context"
	model "maas/maas-service/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTenantServiceDao is a mock of TenantServiceDao interface.
type MockTenantServiceDao struct {
	ctrl     *gomock.Controller
	recorder *MockTenantServiceDaoMockRecorder
}

// MockTenantServiceDaoMockRecorder is the mock recorder for MockTenantServiceDao.
type MockTenantServiceDaoMockRecorder struct {
	mock *MockTenantServiceDao
}

// NewMockTenantServiceDao creates a new mock instance.
func NewMockTenantServiceDao(ctrl *gomock.Controller) *MockTenantServiceDao {
	mock := &MockTenantServiceDao{ctrl: ctrl}
	mock.recorder = &MockTenantServiceDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTenantServiceDao) EXPECT() *MockTenantServiceDaoMockRecorder {
	return m.recorder
}

// DeleteTenantsByNamespace mocks base method.
func (m *MockTenantServiceDao) DeleteTenantsByNamespace(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTenantsByNamespace", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTenantsByNamespace indicates an expected call of DeleteTenantsByNamespace.
func (mr *MockTenantServiceDaoMockRecorder) DeleteTenantsByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTenantsByNamespace", reflect.TypeOf((*MockTenantServiceDao)(nil).DeleteTenantsByNamespace), ctx, namespace)
}

// GetTenantsByNamespace mocks base method.
func (m *MockTenantServiceDao) GetTenantsByNamespace(ctx context.Context, namespace string) ([]model.Tenant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantsByNamespace", ctx, namespace)
	ret0, _ := ret[0].([]model.Tenant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantsByNamespace indicates an expected call of GetTenantsByNamespace.
func (mr *MockTenantServiceDaoMockRecorder) GetTenantsByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantsByNamespace", reflect.TypeOf((*MockTenantServiceDao)(nil).GetTenantsByNamespace), ctx, namespace)
}

// InsertTenant mocks base method.
func (m *MockTenantServiceDao) InsertTenant(ctx context.Context, userTenant *model.Tenant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTenant", ctx, userTenant)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTenant indicates an expected call of InsertTenant.
func (mr *MockTenantServiceDaoMockRecorder) InsertTenant(ctx, userTenant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTenant", reflect.TypeOf((*MockTenantServiceDao)(nil).InsertTenant), ctx, userTenant)
}

// MockKafkaService is a mock of KafkaService interface.
type MockKafkaService struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaServiceMockRecorder
}

// MockKafkaServiceMockRecorder is the mock recorder for MockKafkaService.
type MockKafkaServiceMockRecorder struct {
	mock *MockKafkaService
}

// NewMockKafkaService creates a new mock instance.
func NewMockKafkaService(ctrl *gomock.Controller) *MockKafkaService {
	mock := &MockKafkaService{ctrl: ctrl}
	mock.recorder = &MockKafkaServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaService) EXPECT() *MockKafkaServiceMockRecorder {
	return m.recorder
}

// CreateTopicByTenantTopic mocks base method.
func (m *MockKafkaService) CreateTopicByTenantTopic(ctx context.Context, topicDefinition model.TopicDefinition, tenant model.Tenant) (*model.TopicRegistrationRespDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopicByTenantTopic", ctx, topicDefinition, tenant)
	ret0, _ := ret[0].(*model.TopicRegistrationRespDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopicByTenantTopic indicates an expected call of CreateTopicByTenantTopic.
func (mr *MockKafkaServiceMockRecorder) CreateTopicByTenantTopic(ctx, topicDefinition, tenant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopicByTenantTopic", reflect.TypeOf((*MockKafkaService)(nil).CreateTopicByTenantTopic), ctx, topicDefinition, tenant)
}

// GetTopicDefinitionsByNamespaceAndKind mocks base method.
func (m *MockKafkaService) GetTopicDefinitionsByNamespaceAndKind(ctx context.Context, namespace, kind string) ([]model.TopicDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopicDefinitionsByNamespaceAndKind", ctx, namespace, kind)
	ret0, _ := ret[0].([]model.TopicDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopicDefinitionsByNamespaceAndKind indicates an expected call of GetTopicDefinitionsByNamespaceAndKind.
func (mr *MockKafkaServiceMockRecorder) GetTopicDefinitionsByNamespaceAndKind(ctx, namespace, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopicDefinitionsByNamespaceAndKind", reflect.TypeOf((*MockKafkaService)(nil).GetTopicDefinitionsByNamespaceAndKind), ctx, namespace, kind)
}
