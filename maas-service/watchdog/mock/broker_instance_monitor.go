// Code generated by MockGen. DO NOT EDIT.
// Source: broker_instance_monitor.go

// Package mock_watchdog is a generated GoMock package.
package mock_watchdog

import (
	context "context"
	model "maas/maas-service/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKafkaInstanceProvider is a mock of KafkaInstanceProvider interface.
type MockKafkaInstanceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaInstanceProviderMockRecorder
}

// MockKafkaInstanceProviderMockRecorder is the mock recorder for MockKafkaInstanceProvider.
type MockKafkaInstanceProviderMockRecorder struct {
	mock *MockKafkaInstanceProvider
}

// NewMockKafkaInstanceProvider creates a new mock instance.
func NewMockKafkaInstanceProvider(ctrl *gomock.Controller) *MockKafkaInstanceProvider {
	mock := &MockKafkaInstanceProvider{ctrl: ctrl}
	mock.recorder = &MockKafkaInstanceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaInstanceProvider) EXPECT() *MockKafkaInstanceProviderMockRecorder {
	return m.recorder
}

// AddInstanceUpdateCallback mocks base method.
func (m *MockKafkaInstanceProvider) AddInstanceUpdateCallback(arg0 func(context.Context, *model.KafkaInstance)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInstanceUpdateCallback", arg0)
}

// AddInstanceUpdateCallback indicates an expected call of AddInstanceUpdateCallback.
func (mr *MockKafkaInstanceProviderMockRecorder) AddInstanceUpdateCallback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInstanceUpdateCallback", reflect.TypeOf((*MockKafkaInstanceProvider)(nil).AddInstanceUpdateCallback), arg0)
}

// CheckHealth mocks base method.
func (m *MockKafkaInstanceProvider) CheckHealth(arg0 context.Context, arg1 *model.KafkaInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockKafkaInstanceProviderMockRecorder) CheckHealth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockKafkaInstanceProvider)(nil).CheckHealth), arg0, arg1)
}

// GetKafkaInstances mocks base method.
func (m *MockKafkaInstanceProvider) GetKafkaInstances(ctx context.Context) (*[]model.KafkaInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKafkaInstances", ctx)
	ret0, _ := ret[0].(*[]model.KafkaInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKafkaInstances indicates an expected call of GetKafkaInstances.
func (mr *MockKafkaInstanceProviderMockRecorder) GetKafkaInstances(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKafkaInstances", reflect.TypeOf((*MockKafkaInstanceProvider)(nil).GetKafkaInstances), ctx)
}

// MockRabbitInstanceProvider is a mock of RabbitInstanceProvider interface.
type MockRabbitInstanceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRabbitInstanceProviderMockRecorder
}

// MockRabbitInstanceProviderMockRecorder is the mock recorder for MockRabbitInstanceProvider.
type MockRabbitInstanceProviderMockRecorder struct {
	mock *MockRabbitInstanceProvider
}

// NewMockRabbitInstanceProvider creates a new mock instance.
func NewMockRabbitInstanceProvider(ctrl *gomock.Controller) *MockRabbitInstanceProvider {
	mock := &MockRabbitInstanceProvider{ctrl: ctrl}
	mock.recorder = &MockRabbitInstanceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRabbitInstanceProvider) EXPECT() *MockRabbitInstanceProviderMockRecorder {
	return m.recorder
}

// AddInstanceUpdateCallback mocks base method.
func (m *MockRabbitInstanceProvider) AddInstanceUpdateCallback(arg0 func(context.Context, *model.RabbitInstance)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInstanceUpdateCallback", arg0)
}

// AddInstanceUpdateCallback indicates an expected call of AddInstanceUpdateCallback.
func (mr *MockRabbitInstanceProviderMockRecorder) AddInstanceUpdateCallback(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInstanceUpdateCallback", reflect.TypeOf((*MockRabbitInstanceProvider)(nil).AddInstanceUpdateCallback), arg0)
}

// CheckHealth mocks base method.
func (m *MockRabbitInstanceProvider) CheckHealth(arg0 context.Context, arg1 *model.RabbitInstance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHealth", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckHealth indicates an expected call of CheckHealth.
func (mr *MockRabbitInstanceProviderMockRecorder) CheckHealth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHealth", reflect.TypeOf((*MockRabbitInstanceProvider)(nil).CheckHealth), arg0, arg1)
}

// GetRabbitInstances mocks base method.
func (m *MockRabbitInstanceProvider) GetRabbitInstances(ctx context.Context) (*[]model.RabbitInstance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRabbitInstances", ctx)
	ret0, _ := ret[0].(*[]model.RabbitInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRabbitInstances indicates an expected call of GetRabbitInstances.
func (mr *MockRabbitInstanceProviderMockRecorder) GetRabbitInstances(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRabbitInstances", reflect.TypeOf((*MockRabbitInstanceProvider)(nil).GetRabbitInstances), ctx)
}
